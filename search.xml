<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Affiliate marketing常用的专业术语</title>
    <url>/2022/12/05/affiliate/</url>
    <content><![CDATA[<p>一些常用的Affiliate marketing专业术语，做一个简短的整理。</p>
<span id="more"></span>
<p><strong>Affiliate Marketing</strong></p>
<p><strong>Media buy常见术语</strong></p>
<p><strong>1、 什么是BANNER（横幅广告）？</strong></p>
<p>放置在网站的页面上用于表现商家广告内容的图片，通常大小为468*60像素，往往做成动画形式，这样更具有吸引力。</p>
<p><strong>2、 什么是PAGE VIEW（综合浏览量）？</strong></p>
<p>网站各网页被浏览的总次数。一位访客有可能创造十几个甚至更多的PAGEVIEWS。</p>
<p><strong>3、 什么是IMPRESSIONS（广告闪现次数）？</strong></p>
<p>广告BANNER出现的次数，一般情况下与含有该广告的网页被访问的次数相同。</p>
<p><strong>4、 什么是 CLICKS （点击次数）？</strong></p>
<p>访问者通过点击横幅广告而访问商家的网页，称点击一次。点击这个广告，即表示他对广告内容感兴趣，希望得到更详细的信息。</p>
<p><strong>5、 什么是 CLICKS RATIO （点击率）？</strong></p>
<p>如果广告BANNER的闪现次数（IMPRESSIONS）为10000次，而其点击次数（CLICKS）为300次，那么点击率即为3%。 目前，广告的平均点击率为 2% 。点击率可以准确地反映广告效果， 也是网络广告吸引力的一个标志。</p>
<p><strong>6、 什么是FIRST VIEW（第一屏）？</strong></p>
<p>是读者浏览一个网页时，所看到的第一屏，访问者不用拖动滚动条就可以看到，效果较佳，这个位置条受到绝大多数客户的青睐，因此价格也较高。</p>
<p><strong>7、什么是CPM？</strong></p>
<p>CPM是Cost P e r Thousand的缩写，即每千人次访问的收费或Banner闪现一千次的费用，例如一个广告 Banner 的报价是$10/CPM，意味着每一千人次看到这个Banner，就收费$10。按CPM收费已经成为网络广告的惯例。</p>
<p><strong>8、为什么不按点击广告Banner的次数来收费？</strong></p>
<p>按点击广告Banner的次数来收费，在国际上很少采用。因为网页访客是否点击你的广告Banner去你的网站浏览，还取决于很多因素，比如Banner的设计，客户的网站的内容等等。</p>
<p><strong>9、PTC(Pay to Click)点击赚钱</strong></p>
<p><strong>10、CPM(Cost Per thousand impression )显示千次费用，网上广告每显示1000次的广告费用?</strong></p>
<p><strong>11、CPC(Cost Per thousand click )点击千次费用，网上广告每点击1000次的广告费用?</strong></p>
<p><strong>12、surf冲浪，即上网。</strong></p>
<p><strong>13、b/c = because</strong></p>
<p><strong>14、PO</strong> = Program Owner</p>
<p><strong>15、plz</strong> = Please</p>
<p><strong>16、addy</strong> = address</p>
<p><strong>17、FYI</strong> = For Your Information</p>
<p><strong>18、cmi</strong> = count me in</p>
<p><strong>19、cmo</strong> = count me out</p>
<p><strong>20、IMO</strong> = In My Opinion</p>
<p><strong>21、IOW</strong> = In Other Words</p>
<p><strong>22、ISO</strong> = In Search Of</p>
<p><strong>23、BTW</strong>?= By The Way</p>
<p><strong>23、BRB</strong> = Be Right Back</p>
<p><strong>24、BRT</strong> = Be Right There</p>
<p><strong>25、IM</strong> = Instant Message</p>
<p><strong>26、PM</strong> = Personal Message</p>
<p><strong>27、LOL</strong> = Laughing Out Loud</p>
<p><strong>28、LMAO</strong> = Laughing My A** Off</p>
<p><strong>29、LMFAO</strong> = Laughing My F<em>cking A</em>* Off</p>
<p><strong>30、ROTFLMAO</strong> = Rolling On The Floor Laughing My A** Off</p>
<p><strong>31、ROTFLMFAO</strong> = Rolling On The Floor Laughing My F<em>cking A</em>* Off</p>
<p><strong>32、SLMAO</strong> = Still Laughing My A** Off</p>
<p><strong>33、Peeps</strong> = People</p>
<p><strong>34、2QT2BSTR8</strong> = Too Cute To Be Straight</p>
<p><strong>35、NPA</strong> = New Program Alert</p>
<p><strong>36、WM</strong> = Web Master</p>
<p><strong>37、TOS</strong> = Terms of Service</p>
<p><strong>38、FAQ</strong> = Frequently Asked Questions</p>
<p><strong>39、IMHO</strong> = In My Humble Opinion</p>
<p><strong>40、AFAIK</strong> = As Far As I Know</p>
<p><strong>41、PBUH</strong> = Peace Be Upon Him</p>
<p><strong>42、SO</strong> = Significant Other</p>
<p><strong>43、GF</strong> = GirlFriend</p>
<p><strong>44、W8</strong> = wait</p>
<p><strong>45、U</strong> = you</p>
<p><strong>46、AD views</strong> </p>
<p>广告浏览数，网幅广告被用户下载、显示的次数，等同于impression。</p>
<p><strong>47、Advertisement Management</strong> 广告管理，利用特定的系统管理网页或广告网络揪发的网幅广告，同时提供即的显示数、点击数统计，高级的广告管理系统还能根据访问者的特点和时间选择出现不同的网幅广告。</p>
<p><strong>48、Banner</strong> 网幅广告?标准GIF格式以外的网幅广告称为Rich Media Banner。</p>
<p><strong>49、C/I Ratio</strong> (Click-through to impression ration) 点击与显示的比率</p>
<p><strong>50、Click Ratio</strong> 点击率，如果该网页出现了一万次，而网页上的广告点击次数为500次，则点击率为5%。</p>
<p> <strong>51、Click Through</strong> 点击某一链接的行为</p>
<p> <strong>52、Co-Brand</strong> 共同标志/商标，有时联盟成员之间可以将自己的标志和商标放在框架顶部页面中，以便访问者浏览其网页。</p>
<p><strong>57、Commission</strong> 佣金，参加联盟程序所取得的收入，联盟成员可从联盟站点介绍的访客的销售收入中提成，这个佣金可能是购买或活动的固定费率。</p>
<p><strong>58、CPM</strong> (Cost per thousand impression) 千印象费用，网上广告产生每1000个广告印象（显示）数的费用。</p>
<p><strong>59、CPC</strong> (Cost per thousand click) 千点击费用， 网上广告产生每1000广告点击数的费用</p>
<p><strong>60、EPC</strong> (Average Earning Per One Hundred Clicks) 每100个点击的平均收益，说明点击转换为佣金收入的能力</p>
<p><strong>61、Hosting/Hosted</strong> 每当用户点击链接时进入一个网站的页面，该页面的图像和HTML文档由网站服务器提供，当调用该链接时，这些图像和其他部件就由服务器存储。</p>
<p><strong>62、Impression</strong> 投放次数，网页被访问的次数。</p>
<p><strong>63、</strong>Lead 引导，用户在广告商网站上注册、加入或下载</p>
<p><strong>64、O/C Ratio</strong> 点击与定购的比率，实际点击数与商人网站定购次数的比率。</p>
<p><strong>65、Pay-For-Performance</strong> 行动付付，网站访客采取某一行动而取得付款</p>
<p><strong>66、Pay-per-Click</strong> 每点击支付额</p>
<p><strong>67、Pay-per-Impression</strong> 每显示支付额</p>
<p><strong>68、Pay-per-Lead</strong> 广告商对每一位介绍到该网站的合格注册访客的网站，按固定费率支付的费用结构</p>
<p><strong>69、Pay-per-Sale</strong> 广告商对每一位介绍到该网站的进行消费的网站，按产品或服务销售收入的百分比支付的费用结构</p>
<p><strong>70、Portal Page</strong> 点击广告后连到的页面， 通常是针对广告内容重新设计的页面。</p>
<p><strong>71、Return Days</strong> 返回天数，用户第一次访问和下一次访问商人站点的天数。</p>
<p><strong>72、Storefront</strong> 店面，用于显示新产品或特殊产品的定制页面。</p>
<p><strong>73、Sub-Affiliates</strong> 联盟分站点，用一个帐户维护一个以上的站点，主要站点为联盟站点，其他站点为联盟分站点。</p>
<p><strong>74、deposit</strong> 存入</p>
<p><strong>75、withdraw</strong> 取出</p>
<p><strong>76、refund</strong> 返还，报销</p>
<p><strong>77、compansation</strong> 补偿</p>
<p><strong>78、rate</strong> 比率</p>
<p><strong>79、exchange</strong> 兑换</p>
<p><strong>80、interest</strong> 利息</p>
<p><strong>81、principle</strong> 本金</p>
<p><strong>82、investment</strong> 投资</p>
<p><strong>83、account</strong> 帐户</p>
<p><strong>84、charge</strong> 手续费</p>
<p><strong>85、bonus</strong> 红包，红利，花红，奖励</p>
<p><strong>85、money order</strong> 汇票</p>
<p><strong>86、bank wire</strong> 银行汇款</p>
<p><strong>87、PPC</strong>，就是按点击付费，大家可以理解成国内的百度竞价。每一个点击我们广告的用户，我们都得付一定的费用；<br><strong>88、Social Network</strong>，国内目前貌似就是人人网有这种广告，国外的，主流有Facebook和POF，就是在一个社区里刊登我们的广告，一般有PPC和CPM（按一千次展示付费）两种形式；<br><strong>89、Display</strong>，买别人网站的广告位，以BANNER的形式为主，一般是按CPM形式付费；<br><strong>90、PPV</strong>，弹窗广告，这种弹窗跟国内的弹窗比较不一样，通过PPV的联盟我们可以TARGET用户在打开特定的URL才会弹出我们的广告。</p>
<p><strong>几个Affiliate Marketing接触最频繁的角色：</strong><br><strong>91、</strong>.<strong>广告联盟（Affiliate Network、CPA Network）</strong><br>广告联盟是一个平台，是一道桥梁，他们的存在就是为了帮助广告主刊登在线广告，而广告联盟本身不会帮广告主进行任何推广，而是把广告推广交给Affiliate去操作，从而赚取差价；</p>
<p><strong>92、广告商（Merchant、Advertiser）</strong><br>广告商就是从广告联盟里，投放广告的商家；</p>
<p><strong>93、发布者（Affiliate、Publisher）</strong><br>发布者就是从广告联盟里，选取广告商的广告去推广，从而赚取佣金；</p>
<p><strong>94、流量联盟（Traffic Network、AD Network）</strong><br>这种联盟，他们以卖流量为主，他们卖的可能是自家的流量（SELF SERVE)，例如Facebook，POF，PPV等；<br>也有可能是倒卖别人的流量，例如Google Adwords的内容广告，也可以参照国内的阿里妈妈；</p>
<p><strong>跑Offers正规操作最常见的：</strong><br><strong>95、</strong>ROI – Return of investment -投资回报率<br>我们做正规，最看重就是这个，假如我们在A广告投入10刀，产出15刀，那么ROI就是50%；同理，如果产出5刀，ROI是-50%</p>
<p><strong>96、CTR – Click Thru Rate – 点击率</strong><br>例如100个人看了你的广告，3个人点击了，那么你的点击率是3%；在大多数有PPC模式的平台（BING,ADWORDS,FACEBOOK)，你的广告点击率越高，你每次点击的费用就越低；</p>
<p><strong>97、</strong>.<strong>EPC -Earning Per Click – 每个点击带来的收益</strong><br>假如一个offer，佣金是10刀，你送过去10个点击，转换了1个，那么该Offer的EPC是1刀。</p>
<p><strong>98、CR% – Conversion Rate – 转换率</strong><br>假如一个offer，你送过去10个点击，转换了1个，那么该Offer的转换率是10%</p>
<p><strong>99、Campaign – 广告活动</strong><br>流量平台里，campaign可以理解成广告组的意思，一个campaign下可以有多个Creative（广告样式）。</p>
<p><strong>100、Creative – 广告样式</strong><br>就是你给用户看到的广告样式，或者指某个campaign下的一个子广告，每个平台的creative都不一样，像pof和fb是以图片+文字的广告样式；PPC中，我们的text ad就是我们的creative；Display的话，banner就是我们的creative。</p>
<p><strong>101、.CTA – CALL TO ACTION – 呼吁行动</strong><br>CTA就是一些类似”join now“ ”click here“ ”start today“ ”countinue“ 等LP或者creative上，增加用户点击和转换几率的广告语，常见于一些LP上的BUTTON点击按钮；</p>
<p><strong>102、****Pixel – 转换图素</strong><br>Pixel我们用于放在联盟后台对应的广告里，pixel一般从我们的追踪工具（tracking202或者cpvlab）里提取，然后放到联盟后台去。这样追踪工具才能准确统计出哪里来的流量带来转换。</p>
<p><strong>103、LP – LANDER – LANDING PAGE -引导页</strong><br>用于增加转换，是用户点击你的广告后和到广告商页面之间的一个桥梁，绝大部分情况下，LP可以增加我们的盈利。</p>
<p><strong>104、CPA – COST PER ACTION – 按行动付费</strong><br>CPA是目前AFFILIATE MARKETING主要的形式之一，当用户完全广告商要求的行动，你就会获得佣金。<br>但是CPA的模式，广告商会在乎你的推广质量，如果你带过去一定的转换后，广告商无法从你的转换盈利的话，那么你就会面临被广告商要求你停止推广的局面；</p>
<p><strong>105、CPL – Cost Per Lead – 按引导付费</strong><br>这种其实和市面上大部分CPA都差不多形式，但是CPL的话，大部分时候广告商只要求有效的注册，对转换的质量要求偏低甚至无；</p>
<p><strong>106、CPS – Cost Per Sale – 按销售付费</strong><br>这种是你帮广告商带来销售后，广告商会付一定的比例作为你的销售佣金；</p>
<p><strong>107、CPM – Cost Per Thousand Impression – 按千次展示收费</strong><br>这种是比较流行的Media Buying收费方式，就是不管你的广告有多少个点击，他都按1000次展示来收费。你的点击率越高，那么你的平均点击成本就越低；</p>
<p><strong>108、Revenue Share – 收入分成</strong><br>这种是，你带过去的用户，给广告商带来多少收入，广告商就分成多少给你。常见于DUBO类和CHENGREN类广告，这种模式你可以拿到多次分成；</p>
<p><strong>109、Split test – 轮换测试</strong><br>举个例子，你有2个LP，用户访问的时候，50%到LP 1，50%到LP 2，那么你可以测试得出哪个LP的转换率高一点；同理，也可以同一个LP，50/50几率到2个不同的offer，来测试哪个offer的转换率高一点。</p>
]]></content>
      <categories>
        <category>笔记分享</category>
      </categories>
      <tags>
        <tag>Affiliate</tag>
      </tags>
  </entry>
  <entry>
    <title>ChatGPT 微信小程序可以访问啦</title>
    <url>/2022/12/22/chatgpt/</url>
    <content><![CDATA[<p>ChatGPT限定了部分国家而且需要国外手机验证码，让体验的成本大大增加。<br>现在通过小程序可以访问了，欢迎大家使用，扫码，或者直接搜索“OpenAI 畅聊”。</p>
<span id="more"></span>
<p><img src="/images/6e2aba2744dcd3b4230d06d931b87a59b53e66c8.jpg" alt="OpenAI 畅聊"></p>
<p><strong>小程序部分使用截图：</strong></p>
<p><img src="/images/538215113b0cbcf3c8264ba05d4e5f1bd2aff803.png" alt="AI聊天"></p>
<p><img src="/images/b17fb5228f6c34b737d51b7bb6563a3864c1c20a.png" alt="程序参考"></p>
<p><img src="/images/246154ed50112cfc66c96c39e3abee6303a11ab8.png" alt="AI创作"></p>
<p>还有许多奇奇怪怪的用法等着你来发掘。</p>
<p>官方 chatgpt 入口请访问 <a href="https://chat.openai.com/">https://chat.openai.com/</a>.</p>
]]></content>
      <tags>
        <tag>chatgpt</tag>
      </tags>
  </entry>
  <entry>
    <title>网站使用cloudflare cdn后怎么获取到真实的访客ip地址</title>
    <url>/2019/12/07/cloudflare-real-ip/</url>
    <content><![CDATA[<p>使用shell脚本获取cloudflare真实ip地址</p>
<span id="more"></span>
<pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash
# Simple bash script to restore visitor real IP under Cloudflare with Nginx
# Script also whitelist cloudflare IP with UFW (if installed)

if [ &quot;$1&quot; &#x3D; &quot;--ufw&quot; ]; then
    CF_UFW_SETUP&#x3D;&quot;y&quot;
fi

if [ -z &quot;$(command -v curl)&quot; ]; then
    echo &quot;####################################&quot;
    echo &quot;Installing CURL&quot;
    echo &quot;####################################&quot;
    apt-get update
    apt-get install curl -y
fi

CURL_BIN&#x3D;$(command -v curl)
CF_IPV4&#x3D;$($CURL_BIN -sL https:&#x2F;&#x2F;www.cloudflare.com&#x2F;ips-v4)
CF_IPV6&#x3D;$($CURL_BIN -sL https:&#x2F;&#x2F;www.cloudflare.com&#x2F;ips-v6)

[ ! -d &#x2F;etc&#x2F;nginx&#x2F;conf.d ] &amp;&amp; &#123;
    mkdir -p &#x2F;etc&#x2F;nginx&#x2F;conf.d
&#125;

echo &#39;&#39; &gt; &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;cloudflare.conf
echo &quot;####################################&quot;
echo &quot;Adding Cloudflare IPv4&quot;
echo &quot;####################################&quot;
for cf_ip4 in $CF_IPV4; do
    echo &quot;set_real_ip_from $cf_ip4;&quot; &gt;&gt; &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;cloudflare.conf
    if [ &quot;$CF_UFW_SETUP&quot; &#x3D; &quot;y&quot; ]; then
        ufw allow from $cf_ip4 to any port 80
        ufw allow from $cf_ip4 to any port 443
    fi
done
echo &quot;####################################&quot;
echo &quot;Adding Cloudflare IPv6&quot;
echo &quot;####################################&quot;
for cf_ip6 in $CF_IPV6; do
    echo &quot;set_real_ip_from $cf_ip6;&quot; &gt;&gt; &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;cloudflare.conf
    if [ &quot;$CF_UFW_SETUP&quot; &#x3D; &quot;y&quot; ]; then
        ufw allow from $cf_ip6 to any port 80
        ufw allow from $cf_ip6 to any port 443
    fi
done
echo &#39;real_ip_header CF-Connecting-IP;&#39; &gt;&gt; &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;cloudflare.conf

if [ &quot;$CF_UFW_SETUP&quot; &#x3D; &quot;y&quot; ]; then
    echo &quot;####################################&quot;
    echo &quot;Reloading UFW&quot;
    echo &quot;####################################&quot;
    ufw reload
fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Cloudflare</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>git ssh 出现 connect to host github.com port 22:Connection timed out</title>
    <url>/2020/12/06/git-ssh-timeout/</url>
    <content><![CDATA[<p>使用git 的时候，提示如下错误：connect to host github.com port 22: Connection timed out</p>
<span id="more"></span>

<p><strong>解决方法</strong></p>
<ol>
<li><p>输入这个命令等待结果:</p>
 <pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 结果如果是 “ssh: connect to host github.com port 22: Connection timed out”</p>
</li>
<li><p>打开存放ssh的目录</p>
 <pre class="line-numbers language-none"><code class="language-none">cd ~&#x2F;.ssh
ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p> 或者 直接去 c盘 里边找<br> 查看是否存在 id_rsa id_rsa.pun known_hosts 三个文件，如果没有就需要先配置好用户名和邮箱然后使用<br> ssh-keygen -t rsa -C “你刚才设置过得邮箱” 生成git ssh key 配置到服务端</p>
</li>
<li><p>如果存在，则新建config文件输入下面内容</p>
 <pre class="line-numbers language-none"><code class="language-none">Host github.com
User YourEmail@163.com
Hostname ssh.github.com
PreferredAuthentications publickey
IdentityFile ~&#x2F;.ssh&#x2F;id_rsa
Port 443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>再次执行”ssh -T <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>“ 一遍，会出现如下提示，回车”yes”即可</p>
</li>
<li><p>至此就可以正常用了。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 简明笔记</title>
    <url>/2022/12/09/git-study/</url>
    <content><![CDATA[<p>学习git过程中的简易笔记</p>
<span id="more"></span>
<h2 id="什么是git"><a href="#什么是git" class="headerlink" title="什么是git?"></a>什么是git?</h2><p>简单来说，git就是一种简单的源代码管理系统，它对当前文件提供版本管理功能，核心思想就是建立一个对象数据库，将历史版本信息存入这个库中。</p>
<h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p>分支是使用git过程中常用的操作之一。几乎所有的git操作流程都离不开分支</p>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><pre class="line-numbers language-none"><code class="language-none">git branch mybranch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><pre class="line-numbers language-none"><code class="language-none">git branch -d mybranch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><pre class="line-numbers language-none"><code class="language-none">git switch mybranch
git checkout mybranch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="创建并切换到分支"><a href="#创建并切换到分支" class="headerlink" title="创建并切换到分支"></a>创建并切换到分支</h3><pre class="line-numbers language-none"><code class="language-none">git checkout -b mybranch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>git add命令用于将变化的文件，从工作区提交到暂存区。它的作用就是告诉 Git，下一次哪些变化需要保存到仓库区。用户可以使用git status命令查看目前的暂存区放置了哪些文件。</p>
<pre class="line-numbers language-none"><code class="language-none">将制定文件放入暂存区
git add &lt;file&gt;
将制定目录下所有发生变化的文件放入暂存区
git add &lt;dictory&gt;
将当前目录下的所有文件放入暂存区
git add .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li>-u 参数表示只添加暂存区已有的文件（包括删除操作），但不添加新增的文件  <pre class="line-numbers language-none"><code class="language-none">git add -u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>-A 或者-all表示把所有的修改都添加至暂存区，包括文件的新增、修改和删除  <pre class="line-numbers language-none"><code class="language-none">git add -A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  git 2.0版本开始，-A成为默认参数，比如 git add .就相当于git add . -A</li>
<li>-f 表示强制添加某个文件，不管.gitignore是否包含了这个文件  <pre class="line-numbers language-none"><code class="language-none">git add -f &lt;filename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>-p 表示进入交互模式，指定那些修改需要添加至暂存区。即使是同一个文件，也可以只提交部分变动  <pre class="line-numbers language-none"><code class="language-none">git add -p &lt;文件&#x2F;路径&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="git-cat-file"><a href="#git-cat-file" class="headerlink" title="git cat-file"></a>git cat-file</h2>git cat-file命令显示一个Git对象文件的内容。<pre class="line-numbers language-none"><code class="language-none">git cat-file -p 996icu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2>git checkout 有多重用途</li>
</ul>
<ol>
<li>切换分支<pre class="line-numbers language-none"><code class="language-none">git checkout mybranch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>切换到指定快照（commit）<pre class="line-numbers language-none"><code class="language-none">git checkout &lt;commitId&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>将工作区的指定文件恢复到上次commit的状态<pre class="line-numbers language-none"><code class="language-none">将指定文件从暂存区恢复到工作区,用来丢弃工作区对文件的修改
git checkout -- &lt;filename&gt;
还可以指定从某个 commit 恢复某个指定文件，这会同时改变工作区和暂存区
git checkout HEAD~ -- &lt;filename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>切换到某个tag<pre class="line-numbers language-none"><code class="language-none">git checkout tags&#x2F;1.0.1
或者
git chekout 1.0.1  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
使用 git chekout 1.0.1 切换到某个tag时，本地不得有1.0.1这个分支<h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3></li>
</ol>
<ul>
<li>-b 表示用于生成一个分支<br>·```<br>git checkout -b mybranch</li>
</ul>
<h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><p>git cherry-pick 表示复制一个提交节点并在当前分支做一次完全一样的新提交</p>
<h3 id="单个commit合并"><a href="#单个commit合并" class="headerlink" title="单个commit合并"></a>单个commit合并</h3><pre class="line-numbers language-none"><code class="language-none">git cherry-pick &lt;commitID&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="多个连续commit合并"><a href="#多个连续commit合并" class="headerlink" title="多个连续commit合并"></a>多个连续commit合并</h3><p>commit_id到commit_idn之间，包括两端:</p>
<pre class="line-numbers language-none"><code class="language-none">git cherry-pick commit_id..commit_idn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>commit_id到commit_idn之间，非闭包:</p>
<pre class="line-numbers language-none"><code class="language-none">git cherry-pick （commit_id..commit_idn]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>挑选多个commit:</p>
<pre class="line-numbers language-none"><code class="language-none">git cherry-pick commit_id commit_idx commit_idy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>git clone 命令用于克隆远程仓库</p>
<pre class="line-numbers language-none"><code class="language-none">git clone alpha delta --bare<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上面命令表示将alpha目录（必须是git代码仓库），克隆到delta目录。bare参数表示delta目录只有仓库区，没有工作区和暂存区，即delta目录中就是.git目录的内容。</p>
<h2 id="git-commit-tree"><a href="#git-commit-tree" class="headerlink" title="git commit-tree"></a>git commit-tree</h2><p>根据一个树对象，生成新的commit对象。</p>
<pre class="line-numbers language-none"><code class="language-none">git commit-tree 16e19f -m &quot;First commit&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>git commit命令用于将暂存区中的变化提交到仓库区。</p>
<p>-m参数用于指定 commit 信息，是必需的。如果省略-m参数，git commit会自动打开文本编辑器，要求输入。</p>
<pre class="line-numbers language-none"><code class="language-none">git commit -m &quot;message&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>git commit命令可以跳过暂存区，直接将文件从工作区提交到仓库区。</p>
<pre class="line-numbers language-none"><code class="language-none">git commit &lt;filename&gt;  -m &quot;message&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><ul>
<li><p>-m 表示commit提交时信息</p>
  <pre class="line-numbers language-none"><code class="language-none">git commit  -m &#39;message&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>-a 表示用于现将所有的工作区的变动文件，提交到暂存区</p>
  <pre class="line-numbers language-none"><code class="language-none">git commit -am &quot;message&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>-allow-empty 参数用于没有提交信息的 commit。</p>
  <pre class="line-numbers language-none"><code class="language-none">git commit --allow-empty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>–amend用于撤销上一次的commit，提交一次新的commit</p>
  <pre class="line-numbers language-none"><code class="language-none">git commit --amend -m &quot;change commit&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>–fixup 参数的含义是，当前添加的 commit 是以前某一个 commit 的修正。以后执行互动式的git rebase的时候，这两个 commit 将会合并成一个</p>
  <pre class="line-numbers language-none"><code class="language-none">git commit --fixup &lt;commit&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行上面的命令，提交说明将自动生成，即在目标 commit 的提交说明的最前面，添加”fixup!”这个词。</p>
</li>
<li><p>–squash 参数的作用与–fixup类似，表示当前添加的 commit 应该与以前某一个 commit 合并成一个，以后执行互动式的git rebase的时候，这两个 commit 将会合并成一个。</p>
  <pre class="line-numbers language-none"><code class="language-none">git commit --squash &lt;commit&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>git diff命令用于查看文件之间的差异。</p>
<pre class="line-numbers language-none"><code class="language-none">查看工作区与暂存区的差异
git diff
查看某个文件的工作区与暂存区的差异
git diff filename
查看暂存区与当前 commit 的差异
git diff --cached
查看两个commit的差异
git diff &lt;commitBefore&gt; &lt;commitAfter&gt;
查看工作区与上一次commit之间的差异
git diff HEAD
查看工作区与某个 commit 的差异
git diff &lt;commit&gt;
显示两次提交之间的差异
git diff [first-branch]...[second-branch]
查看工作区与当前分支上一次提交的差异，但是局限于test文件
git diff HEAD -- .&#x2F;test
生成patch
git format-patch master --stdout &gt; mypatch.patch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>比较两个分支</p>
<pre class="line-numbers language-none"><code class="language-none">查看topic分支与master分支最新提交之间的差异
git diff topic master
查看自从topic分支建立以后，master分支发生的变化
git diff topic...master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="git-hash-object"><a href="#git-hash-object" class="headerlink" title="git hash-object"></a>git hash-object</h2><p>git hash-object命令计算一个文件的git对象ID，即SHA1的哈希值。</p>
<pre class="line-numbers language-none"><code class="language-none">echo &quot;hello&quot; | git hash-object --stdin
echo &quot;hola&quot; | git hash-object -w --stdin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>git init命令将当前目录转为git仓库。<br>它会在当前目录下生成一个.git子目录，在其中写入git的配置和项目的快照。</p>
<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>git log命令按照提交时间从最晚到最早的顺序，列出所有 commit。</p>
<pre class="line-numbers language-none"><code class="language-none">列出当前分支的版本历史
git log
列出某个文件的版本历史，包括文件改名
git log --follow [file]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看远程分支的变动情况。</p>
<pre class="line-numbers language-none"><code class="language-none">git log origin&#x2F;branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查找log，即搜索commit信息。</p>
<pre class="line-numbers language-none"><code class="language-none">git log --author&#x3D;authorName
git log -i --grep&#x3D;&quot;Something in the message&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>上面代码中，-i参数表示搜索时忽略大小写。<br>查看某个范围内的commit</p>
<pre class="line-numbers language-none"><code class="language-none">git log origin&#x2F;master..new
[old]..[new] - everything you haven&#39;t pushed yet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>美化输出。</p>
<pre class="line-numbers language-none"><code class="language-none">git log --graph --decorate --pretty&#x3D;oneline --abbrev-commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>—graph commit之间将展示连线</p>
</li>
<li><p>—decorate 显示commit里面的分支</p>
</li>
<li><p>—pretty=oneline 只显示commit信息的标题</p>
</li>
<li><p>—abbrev-commit 只显示commit SHA1的前7位</p>
<h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><p>— –oneline<br>git log默认输出每个 commit 的详细信息，为了节省空间，–oneline参数让输出时，每个 commit 只占用一行。</p>
<pre class="line-numbers language-none"><code class="language-none">git log --oneline --decorate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="git-ls-files"><a href="#git-ls-files" class="headerlink" title="git ls-files"></a>git ls-files</h2><p>列出没有被.gitignore忽视的文件</p>
<pre class="line-numbers language-none"><code class="language-none">git ls-files --other --ignored --exclude-standard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>将当前分支合并到指定分支。</p>
<pre class="line-numbers language-none"><code class="language-none">git merge develop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将当前分支与develop分支合并，产生的新的commit对象有两个父节点。</p>
</li>
</ul>
<p>如果”指定分支”本身是当前分支的一个直接子节点，则会产生fast-forward合并，即合并不会产生新的节点，只是让当前分支指向”指定分支”的最新commit。</p>
<p>Git合并所采用的方法是Three-way merge，及合并的时候除了要合併的兩個檔案，還加上它们共同的父节点。这样可以大大減少人為處理 conflict 的情況。如果采用two-way merge，則只用兩個檔案進行合併（svn默认就是这种合并方法。）</p>
<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>合并指定分支到当前分支</p>
<pre class="line-numbers language-none"><code class="language-none">git pull . topic&#x2F;branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>即使当前分支有没有 commit 的变动，也可以使用git pull从远程拉取分支。</p>
<h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>git rebase 将当前分支移植到指定分支或指定commit之上。</p>
<pre class="line-numbers language-none"><code class="language-none">git rebase -i &lt;commit&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>互动的rebase。</p>
<pre class="line-numbers language-none"><code class="language-none">git rebase -i master~3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h3><ul>
<li>–autosquash参数用于互动模式，必须与-i参数配合使用。它会使得以前通过git commit –fixup和git commit –squash提交的 commit，按照指定的顺序排列（实质是选择提交说明以以fixup!或squash!开头的 commit），即–fixup的 commit 直接排在它所对应的 commit 的后面。</li>
<li>–continue参数用于解决冲突以后，继续执行 rebase。<pre class="line-numbers language-none"><code class="language-none">git rebase --continue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>-i参数会打开互动模式，让用户选择定制rebase的行为。<pre class="line-numbers language-none"><code class="language-none">git rebase -i develop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="git-ref-parse"><a href="#git-ref-parse" class="headerlink" title="git ref-parse"></a>git ref-parse</h2>显示某个指示符的SHA1哈希值。<pre class="line-numbers language-none"><code class="language-none">git ref-parse HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2>为远程仓库添加别名。<pre class="line-numbers language-none"><code class="language-none">显示所有的远程主机
git remote -v
列出某个主机的详细信息
git remote show name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
git remote命令的实质是在.git/config文件添加下面的内容。<pre class="line-numbers language-none"><code class="language-none">git remote add bravo ..&#x2F;bravo

[remote &quot;bravo&quot;]
    url &#x3D; ..&#x2F;bravo&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2>git reset命令用于将当前分支指向另一个位置。<pre class="line-numbers language-none"><code class="language-none">将当期分支的指针倒退三个 commit，并且会改变暂存区
git reset HEAD ~3
倒退指针的同时，不改变暂存区
git reset --soft HEAD~3
倒退指针的同时，改变工作区
git reset --hard HEAD~3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
如果不指定回滚的位置，那么等同于撤销修改。<pre class="line-numbers language-none"><code class="language-none">撤销上一次向暂存区添加的所有文件
git reset
无任何效果
git reset --soft
同时撤销暂存区和工作区的修改，回复到上一次提交的状态
git reset --hard
撤销上一次向暂存区添加的某个指定文件,不影响工作区中的该文件
git reset -- &lt;filename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h3></li>
<li>soft: 不改变工作区和缓存区，只移动 HEAD 到指定 commit</li>
<li>mixed: 只改变缓存区，不改变工作区。这是默认参数，通常用于撤销git add</li>
<li>hard：改变工作区和暂存区到指定 commit。该参数等同于重置，可能会引起数据损失。git reset –hard等同于git reset –hard HEAD。</li>
<li>-p表示键入交互模式，指定暂存区的哪些部分需要撤销。<h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2>git revert命令用于撤销commit。<pre class="line-numbers language-none"><code class="language-none">git revert &lt;commitID&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2>git rm命令用于删除文件。</li>
</ul>
<p>解除追踪某个文件，即该文件已被git add添加，然后抵消这个操作。</p>
<pre class="line-numbers language-none"><code class="language-none">git rm --cached &lt;fileName&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h2><p> git show命令用于查看commit的内容<br> <pre class="line-numbers language-none"><code class="language-none">输出某次提交的元数据和内容变化
git show [commit]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p>
<h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><p>git stash命令用于暂时保存没有提交的工作。运行该命令后，所有没有commit的代码，都会暂时从工作区移除，回到上次commit时的状态。<br>它处于git reset –hard（完全放弃还修改了一半的代码）与git commit（提交代码）命令之间，很类似于”暂停”按钮。</p>
<pre class="line-numbers language-none"><code class="language-none">暂时保存没有提交的工作
git stash
列出所有的暂时保存的工作
git stash list
取出暂时保存的工作
git stash apply stash@&#123;1&#125;
恢复最近一次暂时保存的工作
git stash pop
丢弃最近一次的暂时保存的工作
git stash drop
删除所有的stash
git stash clear<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><p>git tag命令用于为 commit 打标签。Tag 分两种：普通tag和注解tag。只有annotated tag 才會產生 object。</p>
<pre class="line-numbers language-none"><code class="language-none">git tag tmp # 生成.git&#x2F;refs&#x2F;tags&#x2F;tmp
git tag -a release
git tag -a [VERSION] -m &quot;released [VERSION]&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>上面代码表示为当前commit打上一个带注解的标签，标签名为release。<br>普通标签的写法。</p>
<pre class="line-numbers language-none"><code class="language-none">git tag 1.0.0
git push --tags

git tag v0.0.1
git push origin master --tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="git-update-index"><a href="#git-update-index" class="headerlink" title="git update-index"></a>git update-index</h2><p>将工作区的文件加入缓存区域。</p>
<pre class="line-numbers language-none"><code class="language-none">git update-index --add --cacheinfo \
100644 5c1b14949828006ed75a3e8858957f86a2f7e2eb hola.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="git-update-ref"><a href="#git-update-ref" class="headerlink" title="git update-ref"></a>git update-ref</h2><p>git update-ref命令用于更新一个指针文件中的Git对象ID。</p>
<pre class="line-numbers language-none"><code class="language-none">git update-ref refs&#x2F;heads&#x2F;master 107aff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="git-write-tree"><a href="#git-write-tree" class="headerlink" title="git write-tree"></a>git write-tree</h2><p>git write-tree命令用于根据当前缓存区域，生成一个树对象。</p>
<pre class="line-numbers language-none"><code class="language-none">git write-tree<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>以上内容根据学习<a href="https://www.bookstack.cn/read/git-tutorial/docs-tag.md">阮一峰 Git 教程</a>)时学习并记录部分内容。</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 指南</title>
    <url>/2022/12/02/golang-guide/</url>
    <content><![CDATA[<p>Golang 学习指南</p>
<span id="more"></span>
<h1 id="go指南"><a href="#go指南" class="headerlink" title="go指南"></a>go指南</h1><h2 id="导出名"><a href="#导出名" class="headerlink" title="导出名"></a>导出名</h2><ul>
<li>在go中，如果一个名字以大写字母开头，那么它就是已导出的。在导入一个包时，你只能使用其中已导出的包，未导出的名字不能在包外使用。</li>
</ul>
<p>​    示例：</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;math&quot;
)

func main() &#123;
	&#x2F;&#x2F;正确
	fmt.Println(math.Pi)
	&#x2F;&#x2F;错误
	&#x2F;&#x2F;fmt.Println(math.pi);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>函数可以没有参数或者可以接受多个参数</li>
</ul>
<p>示例：</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	fmt.Println(add(1, 2))
&#125;

func add(x int, y int) int &#123;
	return x + y
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>当连续两个或多个函数的已命名形参类型相同时，除最后一个外，其它的都可以省略</li>
</ul>
<p>示例：</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	fmt.Println(add(1, 2))
&#125;

func add(x,y int) int &#123;
	return x + y
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>多值返回</li>
</ul>
<p>函数可以返回任意数量的返回值</p>
<p>示例：</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	pre, next :&#x3D; swap(&quot;hello&quot;, &quot;world&quot;)
	fmt.Println(pre, next)
&#125;

func swap(pre, next string) (string, string) &#123;
	return next, pre
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>命名返回值</li>
</ul>
<p>go的返回值可被命名，它们会被视作定义在函数顶部的变量</p>
<p>示例：</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	pre_res, next_res :&#x3D; swap(&quot;hello&quot;, &quot;world&quot;)
	fmt.Println(pre_res, next_res)
&#125;

func swap(pre, next string) (pre_res, next_res string) &#123;
	pre_res &#x3D; next
	next_res &#x3D; pre
	return
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>var语句用于声明一个变量，跟函数的参数列表一样，类型在最后</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

var c, python, java bool

func main() &#123;
	var i int
	fmt.Println(i, c, python, java)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>变量的初始化</p>
<p>变量声明可以包含初始值，每个变量一个</p>
<p>如果初始值已存在，则可以省略， 变量会从初始值获得类型</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

var i, j int &#x3D; 1, 2

func main() &#123;
	var c, python, java &#x3D; true, false, &quot;no!&quot;
	fmt.Println(i, j, c, python, java)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>短变量的声明</p>
<p>在函数中，简洁赋值语句 := 可在类型明确的时候代替var使用</p>
<p>函数外的每个语句都要以 var func开始，故 := 结构不能在函数外使用</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	var i, j int &#x3D; 1, 2
	k :&#x3D; 3
	c, python, java :&#x3D; true, false, &quot;no!&quot;

	fmt.Println(i, j, k, c, python, java)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul>
<li>常量的声明与变量类似，只不过使用的是const关键字</li>
<li>常量可以是字符串，bool，数字或者字符</li>
<li>常量不能使用 := 声明</li>
</ul>
<h2 id="数值常量"><a href="#数值常量" class="headerlink" title="数值常量"></a>数值常量</h2><ul>
<li><p>数值常量是高精度的值</p>
</li>
<li><p>一个为制定类型的数值常量由上下文来决定类型</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

const (
	&#x2F;&#x2F; 将 1 左移 100 位来创建一个非常大的数字
	&#x2F;&#x2F; 即这个数的二进制是 1 后面跟着 100 个 0
	Big &#x3D; 1 &lt;&lt; 100
	&#x2F;&#x2F; 再往右移 99 位，即 Small &#x3D; 1 &lt;&lt; 1，或者说 Small &#x3D; 2
	Small &#x3D; Big &gt;&gt; 99
)

func needInt(x int) int &#123; return x*10 + 1 &#125;
func needFloat(x float64) float64 &#123;
	return x * 0.1
&#125;

func main() &#123;
	fmt.Println(needInt(Small))
	fmt.Println(needFloat(Small))
	fmt.Println(needFloat(Big))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul>
<li><p>go的基本类型有</p>
<pre class="line-numbers language-none"><code class="language-none">string
bool

int, int8,int 16,int 32,int 64
uint,uint8,uint16,uint32,uint64

byte  &#x2F;&#x2F;uint8的别名

rune &#x2F;&#x2F;int32的别名

float32,float64

complex64 complex128<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>零值,没有明确初始化值的变量声明会被赋予它们的零值</p>
</li>
<li><p>类型转换，在不同类型的变量之间进行转换时需要显式转换</p>
</li>
<li><p>类型推导，在声明一个变量而不指定类型时（即使用不带 := 和 var = 表达式语法），变量的类型由右值推导而出</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

const (
	&#x2F;&#x2F; 将 1 左移 100 位来创建一个非常大的数字
	&#x2F;&#x2F; 即这个数的二进制是 1 后面跟着 100 个 0
	Big &#x3D; 1 &lt;&lt; 100
	&#x2F;&#x2F; 再往右移 99 位，即 Small &#x3D; 1 &lt;&lt; 1，或者说 Small &#x3D; 2
	Small &#x3D; Big &gt;&gt; 99
)

func needInt(x int) int &#123; return x*10 + 1 &#125;
func needFloat(x float64) float64 &#123;
	return x * 0.1
&#125;

func main() &#123;
	fmt.Println(needInt(Small))
	fmt.Println(needFloat(Small))
	fmt.Println(needFloat(Big))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><ul>
<li><p>go只有一种循环：for循环</p>
</li>
<li><p>基本的 <code>for</code> 循环由三部分组成，它们用分号隔开：</p>
<ul>
<li>初始化语句：在第一次迭代前执行</li>
<li>条件表达式：在每次迭代前求值</li>
<li>后置语句：在每次迭代的结尾执行</li>
</ul>
<p>初始化语句通常为一句短变量声明，该变量声明仅在 <code>for</code> 语句的作用域中可见。</p>
<p>一旦条件表达式的布尔值为 <code>false</code>，循环迭代就会终止。</p>
<p><strong>注意</strong>：和 C、Java、JavaScript 之类的语言不同，Go 的 for 语句后面的三个构成部分外没有小括号， 大括号 <code>&#123; &#125;</code> 则是必须的。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	sum :&#x3D; 0
	for i :&#x3D; 0; i &lt; 10; i++ &#123;
		sum +&#x3D; i
	&#125;
	fmt.Println(sum)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>for 是 Go 中的 “while”,你可以去掉分号，因为 C 的 <code>while</code> 在 Go 中叫做 <code>for</code>。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	sum :&#x3D; 1
	for sum &lt; 1000 &#123;
		sum +&#x3D; sum
	&#125;
	fmt.Println(sum)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>无限循环</p>
<pre class="line-numbers language-none"><code class="language-none">package main

func main() &#123;
	for &#123;
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul>
<li><p>Go 的 <code>if</code> 语句与 <code>for</code> 循环类似，表达式外无需小括号 <code>( )</code> ，而大括号 <code>&#123; &#125;</code> 则是必须的。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	count :&#x3D; 10
	var sum int
	for i :&#x3D; 0; i &lt; count; i++ &#123;
		if i%2 &#x3D;&#x3D; 0 &#123;
			sum &#x3D; sum + i
		&#125;
	&#125;
	fmt.Println(sum)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>if的简短语句，和for一样，if语句可以在条件表达式之前执行一个简单的语句，该语句声明的变量作用域仅在if内</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;math&quot;
)

func pow(x, n, lim float64) float64 &#123;
	if v :&#x3D; math.Pow(x, n); v &lt; lim &#123;
		return v
	&#125;
	return lim
&#125;

func main() &#123;
	fmt.Println(
		pow(3, 2, 10),
		pow(3, 3, 20),
	)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>if和else，在if的简短语句中声明的变量同样可以在任何对应的else快中使用</p>
</li>
</ul>
<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><ul>
<li><p>switch是一连串的if-elese的简单写法，它运行第一个值等于条件表达式的case语句</p>
</li>
<li><p>go只运行选定的case,而非之后所有的case语句</p>
</li>
<li><p>除非以fallthrough语句结束，负责分支会自动终止</p>
</li>
<li><p>go的另一个重要点在于switch的case无需为常量，且取值不必为整数</p>
</li>
<li><p>switch的case语句从上到下依次执行，直到匹配成功为止</p>
</li>
<li><p>没有条件的switch同switch true 一样</p>
</li>
</ul>
<h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><ul>
<li><p>defer语句会将函数推迟到外外层函数返回之后执行</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	defer fmt.Println(&quot;world&quot;)

	fmt.Println(&quot;hello&quot;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>defer的推迟函数会被压入一个栈中，当外层函数返回时，被推迟的函数会按照后进先出的顺序调用</p>
</li>
</ul>
<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><ul>
<li><p>go语言有指针，指针保存了值的内存地址</p>
</li>
<li><p>类型 *T指的是指向T类型值的指针，其零值为nil</p>
</li>
<li><p>&amp;操作符会生成一个指向其操作数的指针</p>
</li>
<li><p>*操作符表示指针指向的底层值</p>
</li>
<li><p>go没有指针运算</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	i, j :&#x3D; 12, 13

	fmt.Println(&amp;i)
	fmt.Println(&amp;j)

	p :&#x3D; &amp;i         &#x2F;&#x2F; 指向 i
	fmt.Println(*p) &#x2F;&#x2F; 通过指针读取 i 的值
	*p &#x3D; 21
	fmt.Println(&amp;p) &#x2F;&#x2F; 通过指针设置 i 的值
	fmt.Println(i)  &#x2F;&#x2F; 查看 i 的值

	p &#x3D; &amp;j         &#x2F;&#x2F; 指向 j
	*p &#x3D; *p &#x2F; 37   &#x2F;&#x2F; 通过指针对 j 进行除法运算
	fmt.Println(j) &#x2F;&#x2F; 查看 j 的值
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><ul>
<li>一个结构体（struct）就是一组字段（field）</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

type test struct &#123;
	x int
	y int
&#125;

func main() &#123;
	fmt.Println(test&#123;11, 22&#125;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="结构体字段"><a href="#结构体字段" class="headerlink" title="结构体字段"></a>结构体字段</h2><ul>
<li>结构体字段使用点号来访问</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

type test struct &#123;
	x int
	y int
&#125;

func main() &#123;
	fmt.Println(test&#123;11, 22&#125;)

	&#x2F;&#x2F;点号访问结构体字段
	test :&#x3D; test&#123;23, 25&#125;
	x :&#x3D; test.x
	y :&#x3D; test.y

	fmt.Println(x)
	fmt.Println(y)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><ul>
<li><p>结构体字段可以通过结构体指针来访问</p>
<p>如果我们有一个指向结构体的指针 <code>p</code>，那么可以通过 <code>(*p).X</code> 来访问其字段 <code>X</code>。不过这么写太啰嗦了，所以语言也允许我们使用隐式间接引用，直接写 <code>p.X</code> 就可以。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
)

type test struct &#123;
	x int
	y int
&#125;

func main() &#123;
	fmt.Println(test&#123;11, 22&#125;)

	&#x2F;&#x2F;点号访问结构体字段
	test :&#x3D; test&#123;23, 25&#125;
	x :&#x3D; test.x
	y :&#x3D; test.y

	fmt.Println(x)
	fmt.Println(y)

	&#x2F;&#x2F;结构体指针访问结构体字段
	p_test :&#x3D; &amp;test
	p_test.x &#x3D; 1e9
	fmt.Println(p_test)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="结构体文法"><a href="#结构体文法" class="headerlink" title="结构体文法"></a>结构体文法</h2><ul>
<li><p>结构体文法通过直接列出字段的值来新分配一个结构体。</p>
</li>
<li><p>使用 <code>Name:</code> 语法可以仅列出部分字段。（字段名的顺序无关。）</p>
</li>
<li><p>特殊的前缀 <code>&amp;</code> 返回一个指向结构体的指针。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
)

type test struct &#123;
	x int
	y int
&#125;

var (
	&#x2F;&#x2F;结构体文法通过直接列出字段的值来新分配一个结构体。
	test1      &#x3D; test&#123;21, 22&#125;
	test_empty &#x3D; test&#123;&#125;
	&#x2F;&#x2F;使用 &#96;Name:&#96; 语法可以仅列出部分字段。（字段名的顺序无关。）
	test2 &#x3D; test&#123;x: 2&#125;
	&#x2F;&#x2F;特殊的前缀 &#96;&amp;&#96; 返回一个指向结构体的指针。
	p_test &#x3D; &amp;test&#123;25, 26&#125;
)

func main() &#123;
	fmt.Println(test1, test_empty, test2, p_test)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul>
<li><p>类型 <code>[n]T</code> 表示拥有 <code>n</code> 个 <code>T</code> 类型的值的数组。</p>
<p>表达式</p>
<pre class="line-numbers language-none"><code class="language-none">var a [10]int<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>会将变量 <code>a</code> 声明为拥有 10 个整数的数组。</p>
<p>数组的长度是其类型的一部分，因此数组不能改变大小。这看起来是个限制，不过没关系，Go 提供了更加便利的方式来使用数组</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	var num [10]string

	num[0] &#x3D; &quot;hello&quot;
	num[1] &#x3D; &quot;world&quot;

	fmt.Println(num)

	primes :&#x3D; [6]int&#123;2, 3, 5, 7, 11, 13&#125;
	fmt.Println(primes)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><h2 id="每个切片数组的大小都是固定的。"><a href="#每个切片数组的大小都是固定的。" class="headerlink" title="每个切片数组的大小都是固定的。"></a>每个切片数组的大小都是固定的。</h2><p>而切片则为数组元素提供动态大小的、灵活的视角。在实践中，切片比数组更常用。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	primes :&#x3D; [6]int&#123;2, 3, 5, 7, 11, 13&#125;

	var s []int &#x3D; primes[1:4]
	fmt.Println(s)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>类型 <code>[]T</code> 表示一个元素类型为 <code>T</code> 的切片。</p>
<p>切片通过两个下标来界定，即一个上界和一个下界，二者以冒号分隔：</p>
<pre class="line-numbers language-none"><code class="language-none">a[low : high]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>它会选择一个半开区间，包括第一个元素，但排除最后一个元素。</p>
<p>以下表达式创建了一个切片，它包含 <code>a</code> 中下标从 1 到 3 的元素：</p>
<pre class="line-numbers language-none"><code class="language-none">a[1:4]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="切片就像数组的引用"><a href="#切片就像数组的引用" class="headerlink" title="切片就像数组的引用"></a>切片就像数组的引用</h2><p>切片并不存储任何数据，它只是描述底层数组中的一段</p>
<p>更改切片的元素会修改底层数组中对应的元素</p>
<p>与它共享底层数组的切片都会观测到这些修改</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	names :&#x3D; [4]string&#123;
		&quot;John&quot;,
		&quot;Paul&quot;,
		&quot;George&quot;,
		&quot;Ringo&quot;,
	&#125;
	fmt.Println(names)

	a :&#x3D; names[0:2]
	b :&#x3D; names[1:3]
	fmt.Println(a, b)

	b[0] &#x3D; &quot;XXX&quot;
	fmt.Println(a, b)
	fmt.Println(names)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="切片文法"><a href="#切片文法" class="headerlink" title="切片文法"></a>切片文法</h2><pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	q :&#x3D; []int&#123;2, 3, 5, 7, 11, 13&#125;
	fmt.Println(q)

	r :&#x3D; []bool&#123;true, false, true, true, false, true&#125;
	fmt.Println(r)

	s :&#x3D; []struct &#123;
		i int
		b bool
	&#125;&#123;
		&#123;2, true&#125;,
		&#123;3, false&#125;,
		&#123;5, true&#125;,
		&#123;7, true&#125;,
		&#123;11, false&#125;,
		&#123;13, true&#125;,
	&#125;
	fmt.Println(s)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>切片文法类似于没有长度的数组文法。</p>
<p>这是一个数组文法：</p>
<pre class="line-numbers language-none"><code class="language-none">[3]bool&#123;true, true, false&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>下面这样则会创建一个和上面相同的数组，然后构建一个引用了它的切片：</p>
<pre class="line-numbers language-none"><code class="language-none">[]bool&#123;true, true, false&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="切片的默认行为"><a href="#切片的默认行为" class="headerlink" title="切片的默认行为"></a>切片的默认行为</h2><ul>
<li><p>在进行切片时，你可以利用它的默认行为来忽略上下界。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	s :&#x3D; []int&#123;2, 3, 5, 7, 11, 13&#125;

	s &#x3D; s[1:4]
	fmt.Println(s)

	s &#x3D; s[:2]
	fmt.Println(s)

	s &#x3D; s[1:]
	fmt.Println(s)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>切片下界的默认值为 0，上界则是该切片的长度。</p>
<p>对于数组</p>
<pre class="line-numbers language-none"><code class="language-none">var a [10]int<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>来说，以下切片是等价的：</p>
<pre class="line-numbers language-none"><code class="language-none">a[0:10]
a[:10]
a[0:]
a[:]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="切片的长度与容量"><a href="#切片的长度与容量" class="headerlink" title="切片的长度与容量"></a>切片的长度与容量</h2><ul>
<li><p>切片拥有 <strong>长度</strong> 和 <strong>容量</strong>。</p>
</li>
<li><p>切片的长度就是它所包含的元素个数。</p>
</li>
<li><p>切片的容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。</p>
</li>
<li><p>切片 <code>s</code> 的长度和容量可通过表达式 <code>len(s)</code> 和 <code>cap(s)</code> 来获取。</p>
</li>
<li><p>你可以通过重新切片来扩展一个切片，给它提供足够的容量。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	s :&#x3D; []int&#123;2, 3, 5, 7, 11, 13&#125;
	printSlice(s)

	&#x2F;&#x2F; 截取切片使其长度为 0
	s &#x3D; s[:0]
	printSlice(s)

	&#x2F;&#x2F; 拓展其长度
	s &#x3D; s[:4]
	printSlice(s)

	&#x2F;&#x2F; 舍弃前两个值
	s &#x3D; s[2:]
	printSlice(s)
&#125;

func printSlice(s []int) &#123;
	fmt.Printf(&quot;len&#x3D;%d cap&#x3D;%d %v\n&quot;, len(s), cap(s), s)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="切片的零值是nil"><a href="#切片的零值是nil" class="headerlink" title="切片的零值是nil"></a>切片的零值是nil</h2><ul>
<li><p>nil 切片的长度和容量都为0且没有底层数组</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;零值切片  nil
var test []int
printSlice(test)
if test &#x3D;&#x3D; nil &#123;
	fmt.Println(&quot;nil!&quot;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="用make创建切片"><a href="#用make创建切片" class="headerlink" title="用make创建切片"></a>用make创建切片</h2><ul>
<li><p>切片可以使用make的方式创建，这也是创建动态数组的方式</p>
</li>
<li><p><code>make</code> 函数会分配一个元素为零值的数组并返回一个引用了它的切片：</p>
<pre class="line-numbers language-none"><code class="language-none">a :&#x3D; make([]int, 5)  &#x2F;&#x2F; len(a)&#x3D;5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>要指定它的容量，需向 <code>make</code> 传入第三个参数：</p>
<pre class="line-numbers language-none"><code class="language-none">b :&#x3D; make([]int, 0, 5) &#x2F;&#x2F; len(b)&#x3D;0, cap(b)&#x3D;5

b &#x3D; b[:cap(b)] &#x2F;&#x2F; len(b)&#x3D;5, cap(b)&#x3D;5
b &#x3D; b[1:]      &#x2F;&#x2F; len(b)&#x3D;4, cap(b)&#x3D;4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>示例：</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	&#x2F;&#x2F;make 创建qie片
	test :&#x3D; make([]string, 5) &#x2F;&#x2F;len(test) &#x3D; 5
	printSlice(&quot;test切片&quot;, test)

	test1 :&#x3D; make([]string, 0, 5) &#x2F;&#x2F;len(test1) &#x3D; 0    cap(test1) &#x3D; 5
	printSlice(&quot;test1切片&quot;, test1)

	split_test :&#x3D; test[:2]
	printSlice(&quot;切割0,2的数据&quot;, split_test)

	split_test1 :&#x3D; test[0:1]
	printSlice(&quot;切割0,1的数据&quot;, split_test1)
&#125;

func printSlice(s string, x []string) &#123;
	fmt.Printf(&quot;%s len&#x3D;%d cap&#x3D;%d %v\n&quot;, s, len(x), cap(x), x)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="切片的切片"><a href="#切片的切片" class="headerlink" title="切片的切片"></a>切片的切片</h2><ul>
<li>切片可包含任何类型，甚至包括其他的切片</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;strings&quot;
)

func main() &#123;
	&#x2F;&#x2F; 创建一个井字板（经典游戏）
	board :&#x3D; [][]string&#123;
		[]string&#123;&quot;_&quot;, &quot;_&quot;, &quot;_&quot;&#125;,
		[]string&#123;&quot;_&quot;, &quot;_&quot;, &quot;_&quot;&#125;,
		[]string&#123;&quot;_&quot;, &quot;_&quot;, &quot;_&quot;&#125;,
	&#125;

	&#x2F;&#x2F; 两个玩家轮流打上 X 和 O
	board[0][0] &#x3D; &quot;X&quot;
	board[2][2] &#x3D; &quot;O&quot;
	board[1][2] &#x3D; &quot;X&quot;
	board[1][0] &#x3D; &quot;O&quot;
	board[0][2] &#x3D; &quot;X&quot;

	for i :&#x3D; 0; i &lt; len(board); i++ &#123;
		fmt.Printf(&quot;%s\n&quot;, strings.Join(board[i], &quot; &quot;))
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="向切片追加新元素"><a href="#向切片追加新元素" class="headerlink" title="向切片追加新元素"></a>向切片追加新元素</h2><ul>
<li><p>go提供了内建的append函数为切片追加新的元素</p>
<pre class="line-numbers language-none"><code class="language-none">func append(s []T, vs ...T) []T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>append</code> 的第一个参数 <code>s</code> 是一个元素类型为 <code>T</code> 的切片，其余类型为 <code>T</code> 的值将会追加到该切片的末尾。</p>
<p><code>append</code> 的结果是一个包含原切片所有元素加上新添加元素的切片。</p>
<p>当 <code>s</code> 的底层数组太小，不足以容纳所有给定的值时，它就会分配一个更大的数组。返回的切片会指向这个新分配的数组。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	&#x2F;&#x2F;为切片追加新的元素
	&#x2F;&#x2F; var test []string
	var test &#x3D; make([]string, 5)
	&#x2F;&#x2F;使用append追加新元素
	printSlice(test)

	test &#x3D; append(test, &quot;zhangan&quot;, &quot;lisi&quot;) &#x2F;&#x2F;append之后，切片会按需增长
	printSlice(test)
&#125;

func printSlice(s []string) &#123;
	fmt.Printf(&quot;len&#x3D;%d cap&#x3D;%d %v\n&quot;, len(s), cap(s), s)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><ul>
<li><p>for循环的range形式可遍历切片或映射</p>
</li>
<li><p>当使用 <code>for</code> 循环遍历切片时，每次迭代都会返回两个值。第一个值为当前元素的下标，第二个值为该下标所对应元素的一份副本。</p>
</li>
<li><p>可以将下标或值赋予_来忽略它，若你只需要索引忽略第二个即可</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	&#x2F;&#x2F;for循环的range形式可遍历切片和映射
	var test []int
	test &#x3D; append(test, 1, 2, 3, 4, 5, 6, 6, 35, 43, 23, 1)
	fmt.Println(test)

	for _, v :&#x3D; range test &#123;
		fmt.Printf(&quot;2*%d &#x3D; %d\n&quot;, v, 2*v)
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><ul>
<li><p>将键映射到值</p>
</li>
<li><p>映射的零值为nil,nil映射既没有键，也不能添加键</p>
</li>
<li><p>make函数会返回给定类型的映射，并将其初始化备用</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

type test_map struct &#123;
	Lat, Long float64
&#125;

var t_map map[string]test_map

func main() &#123;
	t_map &#x3D; make(map[string]test_map)
	t_map[&quot;Bell Labs&quot;] &#x3D; test_map&#123;
		40.68433, -74.39967,
	&#125;
	fmt.Println(t_map[&quot;Bell Labs&quot;])
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="映射的文法"><a href="#映射的文法" class="headerlink" title="映射的文法"></a>映射的文法</h2><ul>
<li><p>映射的文法与结构体相似，不过必须有键名</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

type Vertex struct &#123;
	Lat, Long float64
&#125;

var m &#x3D; map[string]Vertex&#123;
	&quot;Bell Labs&quot;: Vertex&#123;
		40.68433, -74.39967,
	&#125;,
	&quot;Google&quot;: Vertex&#123;
		37.42202, -122.08408,
	&#125;,
&#125;

func main() &#123;
	fmt.Println(m)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>若顶级类型只是一个类型名，你可以在文法的元素中省略它。</p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

type Vertex struct &#123;
	Lat, Long float64
&#125;

var m &#x3D; map[string]Vertex&#123;
	&quot;Bell Labs&quot;: &#123;40.68433, -74.39967&#125;,
	&quot;Google&quot;:    &#123;37.42202, -122.08408&#125;,
&#125;

func main() &#123;
	fmt.Println(m)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="修改映射"><a href="#修改映射" class="headerlink" title="修改映射"></a>修改映射</h2><ul>
<li><p>在映射m中插入或者修改元素</p>
<pre class="line-numbers language-none"><code class="language-none">m[key] &#x3D; elem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>获取元素</p>
<pre class="line-numbers language-none"><code class="language-none">elem &#x3D; m[key]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>删除元素</p>
<pre class="line-numbers language-none"><code class="language-none">delete(m,key)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>通过双赋值检测某个键是否存在：</p>
<pre class="line-numbers language-none"><code class="language-none">elem, ok &#x3D; m[key]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>若 <code>key</code> 在 <code>m</code> 中，<code>ok</code> 为 <code>true</code> ；否则，<code>ok</code> 为 <code>false</code>。</p>
<p>若 <code>key</code> 不在映射中，那么 <code>elem</code> 是该映射元素类型的零值。</p>
<p>同样的，当从映射中读取某个不存在的键时，结果是映射的元素类型的零值。</p>
<p><strong>注</strong> ：若 <code>elem</code> 或 <code>ok</code> 还未声明，你可以使用短变量声明：</p>
</li>
<li><p>示例</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	m :&#x3D; make(map[string]int)

	m[&quot;Answer&quot;] &#x3D; 42
	fmt.Println(&quot;The value:&quot;, m[&quot;Answer&quot;])

	m[&quot;Answer&quot;] &#x3D; 48
	fmt.Println(&quot;The value:&quot;, m[&quot;Answer&quot;])

	delete(m, &quot;Answer&quot;)
	fmt.Println(&quot;The value:&quot;, m[&quot;Answer&quot;])

	v, ok :&#x3D; m[&quot;Answer&quot;]
	fmt.Println(&quot;The value:&quot;, v, &quot;Present?&quot;, ok)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="映射练习"><a href="#映射练习" class="headerlink" title="映射练习"></a>映射练习</h2><pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;strings&quot;

	&quot;golang.org&#x2F;x&#x2F;tour&#x2F;wc&quot;
)

func WordCount(s string) map[string]int &#123;
	words_count :&#x3D; make(map[string]int)
	string_array :&#x3D; strings.Fields(s)
	for i :&#x3D; 0; i &lt; len(string_array); i++ &#123;
		words_count[string_array[i]] +&#x3D; 1
	&#125;
	return words_count
&#125;

func main() &#123;
	wc.Test(WordCount)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h1><h2 id="函数也是值，他们可以像其它值一样传递"><a href="#函数也是值，他们可以像其它值一样传递" class="headerlink" title="函数也是值，他们可以像其它值一样传递"></a>函数也是值，他们可以像其它值一样传递</h2><h2 id="函数值可以用作函数的参数或返回值"><a href="#函数值可以用作函数的参数或返回值" class="headerlink" title="函数值可以用作函数的参数或返回值"></a>函数值可以用作函数的参数或返回值</h2><pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;math&quot;
)

func compute(fn func(float64, float64) float64) float64 &#123;
	return fn(3, 4)
&#125;

func main() &#123;
	hypot :&#x3D; func(x, y float64) float64 &#123;
		return math.Sqrt(x*x + y*y)
	&#125;
	fmt.Println(hypot(5, 12))

	fmt.Println(compute(hypot))
	fmt.Println(compute(math.Pow))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="函数的闭包"><a href="#函数的闭包" class="headerlink" title="函数的闭包"></a>函数的闭包</h2><ul>
<li><p>Go 函数可以是一个闭包。闭包是一个函数值，它引用了其函数体之外的变量。该函数可以访问并赋予其引用的变量的值，换句话说，该函数被这些变量“绑定”在一起。</p>
<p>例如，函数 <code>adder</code> 返回一个闭包。每个闭包都被绑定在其各自的 <code>sum</code> 变量上。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func adder() func(int) int &#123;
	sum :&#x3D; 0
	return func(x int) int &#123;
		sum +&#x3D; x
		return sum
	&#125;
&#125;

func main() &#123;
	pos, neg :&#x3D; adder(), adder()
	for i :&#x3D; 0; i &lt; 10; i++ &#123;
		fmt.Println(
			pos(i),
			neg(-2*i),
		)
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>练习：斐波那契数列使用闭包的形式实现</p>
<pre class="line-numbers language-none"><code class="language-none">package main
 
import &quot;fmt&quot;
 
&#x2F;&#x2F; 返回一个“返回int的函数”
func fibonacci() func() int &#123;
	a1, a2 :&#x3D; 0, 1
	return func() int &#123;
		res :&#x3D; a1
		a1, a2 &#x3D; a2, a1+a2
		return res
	&#125;
&#125;
 
func main() &#123;
	f :&#x3D; fibonacci()
	for i :&#x3D; 0; i &lt; 10; i++ &#123;
		fmt.Println(f())
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="方法和接口"><a href="#方法和接口" class="headerlink" title="方法和接口"></a>方法和接口</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li><p>go没有类，不过你可以为结构体类型定义方法</p>
</li>
<li><p>方法就是一类带特殊的接受者的参数的函数</p>
</li>
<li><p>方法接收者在它自己的参数列表内，位于func关键字和方法名之间</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;math&quot;
)

type Vertex struct &#123;
	X, Y float64
&#125;

func (v Vertex) Abs() float64 &#123;
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
&#125;

func main() &#123;
	v :&#x3D; Vertex&#123;3, 4&#125;
	fmt.Println(v.Abs())
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="方法即函数"><a href="#方法即函数" class="headerlink" title="方法即函数"></a>方法即函数</h3><ul>
<li>方法只是个带接收者参数的函数</li>
</ul>
<h3 id="指针接收者"><a href="#指针接收者" class="headerlink" title="指针接收者"></a>指针接收者</h3><ul>
<li><p>你可以为指针接收者声明方法。</p>
<p>这意味着对于某类型 <code>T</code>，接收者的类型可以用 <code>*T</code> 的文法。（此外，<code>T</code> 不能是像 <code>*int</code> 这样的指针。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;math&quot;
)

type Vertex struct &#123;
	X, Y float64
&#125;

func (v Vertex) Abs() float64 &#123;
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
&#125;

func (v *Vertex) Scale(f float64) &#123;
	v.X &#x3D; v.X * f
	v.Y &#x3D; v.Y * f
&#125;

func main() &#123;
	v :&#x3D; Vertex&#123;3, 4&#125;
	v.Scale(10)
	fmt.Println(v.Abs())
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="指针与函数"><a href="#指针与函数" class="headerlink" title="指针与函数"></a>指针与函数</h3><ul>
<li>现在我们要把 <code>Abs</code> 和 <code>Scale</code> 方法重写为函数。</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;math&quot;
)

type Vertex struct &#123;
	X, Y float64
&#125;

func Abs(v Vertex) float64 &#123;
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
&#125;

func Scale(v *Vertex, f float64) &#123;
	v.X &#x3D; v.X * f
	v.Y &#x3D; v.Y * f
&#125;

func main() &#123;
	v :&#x3D; Vertex&#123;3, 4&#125;
	Scale(&amp;v, 10)
	fmt.Println(Abs(v))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="方法与指针重定向"><a href="#方法与指针重定向" class="headerlink" title="方法与指针重定向"></a>方法与指针重定向</h3><ul>
<li><p>比较前两个程序，你大概会注意到带指针参数的函数必须接受一个指针：</p>
<pre class="line-numbers language-none"><code class="language-none">var v Vertex
ScaleFunc(v, 5)  &#x2F;&#x2F; 编译错误！
ScaleFunc(&amp;v, 5) &#x2F;&#x2F; OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>而以指针为接收者的方法被调用时，接收者既能为值又能为指针：</p>
<pre class="line-numbers language-none"><code class="language-none">var v Vertex
v.Scale(5)  &#x2F;&#x2F; OK
p :&#x3D; &amp;v
p.Scale(10) &#x2F;&#x2F; OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于语句 <code>v.Scale(5)</code>，即便 <code>v</code> 是个值而非指针，带指针接收者的方法也能被直接调用。 也就是说，由于 <code>Scale</code> 方法有一个指针接收者，为方便起见，Go 会将语句 <code>v.Scale(5)</code> 解释为 <code>(&amp;v).Scale(5)</code>。</p>
</li>
</ul>
<h3 id="选择值或指针作为接收者"><a href="#选择值或指针作为接收者" class="headerlink" title="选择值或指针作为接收者"></a>选择值或指针作为接收者</h3><ul>
<li><p>使用指针接收者的原因有二：</p>
<p>首先，方法能够修改其接收者指向的值。</p>
<p>其次，这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样做会更加高效。</p>
<p>在本例中，<code>Scale</code> 和 <code>Abs</code> 接收者的类型为 <code>*Vertex</code>，即便 <code>Abs</code> 并不需要修改其接收者。</p>
<p>通常来说，所有给定类型的方法都应该有值或指针接收者，但并不应该二者混用。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;math&quot;
)

type Vertex struct &#123;
	X, Y float64
&#125;

func (v *Vertex) Scale(f float64) &#123;
	v.X &#x3D; v.X * f
	v.Y &#x3D; v.Y * f
&#125;

func (v *Vertex) Abs() float64 &#123;
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
&#125;

func main() &#123;
	v :&#x3D; &amp;Vertex&#123;3, 4&#125;
	fmt.Printf(&quot;Before scaling: %+v, Abs: %v\n&quot;, v, v.Abs())
	v.Scale(5)
	fmt.Printf(&quot;After scaling: %+v, Abs: %v\n&quot;, v, v.Abs())
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h3><p>接口类型是由一组方法签名定义的集合</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;math&quot;
)

type Abser interface &#123;
	Abs() float64
&#125;

func main() &#123;
	var a Abser
	f :&#x3D; MyFloat(-math.Sqrt2)
	v :&#x3D; Vertex&#123;3, 4&#125;

	a &#x3D; f  &#x2F;&#x2F; a MyFloat 实现了 Abser
	a &#x3D; &amp;v &#x2F;&#x2F; a *Vertex 实现了 Abser

	&#x2F;&#x2F; 下面一行，v 是一个 Vertex（而不是 *Vertex）
	&#x2F;&#x2F; 所以没有实现 Abser。
	&#x2F;&#x2F; a &#x3D; v

	fmt.Println(a.Abs())
&#125;

type MyFloat float64

func (f MyFloat) Abs() float64 &#123;
	if f &lt; 0 &#123;
		return float64(-f)
	&#125;
	return float64(f)
&#125;

type Vertex struct &#123;
	X, Y float64
&#125;

func (v *Vertex) Abs() float64 &#123;
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="接口与隐式实现"><a href="#接口与隐式实现" class="headerlink" title="接口与隐式实现"></a>接口与隐式实现</h3><ul>
<li><p>类型通过实现一个接口的所有方法来实现该接口。既然无需专门显式声明，也就没有“implements”关键字。</p>
<p>隐式接口从接口的实现中解耦了定义，这样接口的实现可以出现在任何包中，无需提前准备。</p>
<p>因此，也就无需在每一个实现上增加新的接口名称，这样同时也鼓励了明确的接口定义。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

type I interface &#123;
	M()
&#125;

type T struct &#123;
	S string
&#125;

&#x2F;&#x2F; 此方法表示类型 T 实现了接口 I，但我们无需显式声明此事。
func (t T) M() &#123;
	fmt.Println(t.S)
&#125;

func main() &#123;
	var i I &#x3D; T&#123;&quot;hello&quot;&#125;
	i.M()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="接口值"><a href="#接口值" class="headerlink" title="接口值"></a>接口值</h3><ul>
<li><p>接口也是值，可以像其他值一样传递</p>
</li>
<li><p>‘接口值可以用作函数的参数和返回值</p>
</li>
<li><p>在内部，接口值可以看做包含值和具体类型的元组：</p>
<pre class="line-numbers language-none"><code class="language-none">(value, type)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接口值保存了一个具体底层类型的具体值。</p>
<p>接口值调用方法时会执行其底层类型的同名方法。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;math&quot;
)

type I interface &#123;
	M()
&#125;

type T struct &#123;
	S string
&#125;

func (t *T) M() &#123;
	fmt.Println(t.S)
&#125;

type F float64

func (f F) M() &#123;
	fmt.Println(f)
&#125;

func main() &#123;
	var i I

	i &#x3D; &amp;T&#123;&quot;Hello&quot;&#125;
	describe(i)
	i.M()

	i &#x3D; F(math.Pi)
	describe(i)
	i.M()
&#125;

func describe(i I) &#123;
	fmt.Printf(&quot;(%v, %T)\n&quot;, i, i)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="底层值为-nil-的接口值"><a href="#底层值为-nil-的接口值" class="headerlink" title="底层值为 nil 的接口值"></a>底层值为 nil 的接口值</h3><ul>
<li><p>即便接口内的具体值为 nil，方法仍然会被 nil 接收者调用。</p>
<p>在一些语言中，这会触发一个空指针异常，但在 Go 中通常会写一些方法来优雅地处理它（如本例中的 <code>M</code> 方法）。</p>
<p><strong>注意:</strong> 保存了 nil 具体值的接口其自身并不为 nil。</p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

type I interface &#123;
	M()
&#125;

type T struct &#123;
	S string
&#125;

func (t *T) M() &#123;
	if t &#x3D;&#x3D; nil &#123;
		fmt.Println(&quot;&lt;nil&gt;&quot;)
		return
	&#125;
	fmt.Println(t.S)
&#125;

func main() &#123;
	var i I

	var t *T
	i &#x3D; t
	describe(i)
	i.M()

	i &#x3D; &amp;T&#123;&quot;hello&quot;&#125;
	describe(i)
	i.M()
&#125;

func describe(i I) &#123;
	fmt.Printf(&quot;(%v, %T)\n&quot;, i, i)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="nil-接口值"><a href="#nil-接口值" class="headerlink" title="nil 接口值"></a>nil 接口值</h3><ul>
<li>nil接口值即不保存值也不保存具体类型</li>
<li>为 nil 接口调用方法会产生运行时错误，因为接口的元组内并未包含能够指明该调用哪个 <strong>具体</strong> 方法的类型</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

type I interface &#123;
	M()
&#125;

func main() &#123;
	var i I
	describe(i)
	i.M()
&#125;

func describe(i I) &#123;
	fmt.Printf(&quot;(%v, %T)\n&quot;, i, i)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><ul>
<li>指定了零个方法的接口值被称为空接口</li>
<li>空接口可以保存任何类型的值 （因为每个类型都实现了至少零个方法）</li>
<li>空接口被用来处理未知类型的值。例如，<code>fmt.Print</code> 可接受类型为 <code>interface&#123;&#125;</code> 的任意数量的参数。</li>
</ul>
<h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><ul>
<li><p><strong>类型断言</strong> 提供了访问接口值底层具体值的方式。</p>
<pre class="line-numbers language-none"><code class="language-none">t :&#x3D; i.(T)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>该语句断言接口值 <code>i</code> 保存了具体类型 <code>T</code>，并将其底层类型为 <code>T</code> 的值赋予变量 <code>t</code>。</p>
<p>若 <code>i</code> 并未保存 <code>T</code> 类型的值，该语句就会触发一个恐慌。</p>
<p>为了 <strong>判断</strong> 一个接口值是否保存了一个特定的类型，类型断言可返回两个值：其底层值以及一个报告断言是否成功的布尔值。</p>
<pre class="line-numbers language-none"><code class="language-none">t, ok :&#x3D; i.(T)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>若 <code>i</code> 保存了一个 <code>T</code>，那么 <code>t</code> 将会是其底层值，而 <code>ok</code> 为 <code>true</code>。</p>
<p>否则，<code>ok</code> 将为 <code>false</code> 而 <code>t</code> 将为 <code>T</code> 类型的零值，程序并不会产生恐慌。</p>
<p>请注意这种语法和读取一个映射时的相同之处。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	var i interface&#123;&#125; &#x3D; &quot;hello&quot;

	s :&#x3D; i.(string)
	fmt.Println(s)

	s, ok :&#x3D; i.(string)
	fmt.Println(s, ok)

	f, ok :&#x3D; i.(float64)
	fmt.Println(f, ok)

	f &#x3D; i.(float64) &#x2F;&#x2F; 报错(panic)
	fmt.Println(f)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="类型选择"><a href="#类型选择" class="headerlink" title="类型选择"></a>类型选择</h3><ul>
<li><p><strong>类型选择</strong> 是一种按顺序从几个类型断言中选择分支的结构。</p>
<p>类型选择与一般的 switch 语句相似，不过类型选择中的 case 为类型（而非值）， 它们针对给定接口值所存储的值的类型进行比较。</p>
<pre class="line-numbers language-none"><code class="language-none">switch v :&#x3D; i.(type) &#123;
case T:
    &#x2F;&#x2F; v 的类型为 T
case S:
    &#x2F;&#x2F; v 的类型为 S
default:
    &#x2F;&#x2F; 没有匹配，v 与 i 的类型相同
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>类型选择中的声明与类型断言 <code>i.(T)</code> 的语法相同，只是具体类型 <code>T</code> 被替换成了关键字 <code>type</code>。</p>
<p>此选择语句判断接口值 <code>i</code> 保存的值类型是 <code>T</code> 还是 <code>S</code>。在 <code>T</code> 或 <code>S</code> 的情况下，变量 <code>v</code> 会分别按 <code>T</code> 或 <code>S</code> 类型保存 <code>i</code> 拥有的值。在默认（即没有匹配）的情况下，变量 <code>v</code> 与 <code>i</code> 的接口类型和值相同。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func do(i interface&#123;&#125;) &#123;
	switch v :&#x3D; i.(type) &#123;
	case int:
		fmt.Printf(&quot;Twice %v is %v\n&quot;, v, v*2)
	case string:
		fmt.Printf(&quot;%q is %v bytes long\n&quot;, v, len(v))
	default:
		fmt.Printf(&quot;I don&#39;t know about type %T!\n&quot;, v)
	&#125;
&#125;

func main() &#123;
	do(21)
	do(&quot;hello&quot;)
	do(true)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="Stringer"><a href="#Stringer" class="headerlink" title="Stringer"></a>Stringer</h3><ul>
<li><p><a href="https://go-zh.org/pkg/fmt/"><code>fmt</code></a> 包中定义的 <a href="https://go-zh.org/pkg/fmt/#Stringer"><code>Stringer</code></a> 是最普遍的接口之一。</p>
<pre class="line-numbers language-none"><code class="language-none">type Stringer interface &#123;
    String() string
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><code>Stringer</code> 是一个可以用字符串描述自己的类型。<code>fmt</code> 包（还有很多包）都通过此接口来打印值。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

type Person struct &#123;
	Name string
	Age  int
&#125;

func (p Person) String() string &#123;
	return fmt.Sprintf(&quot;%v (%v years)&quot;, p.Name, p.Age)
&#125;

func main() &#123;
	a :&#x3D; Person&#123;&quot;Arthur Dent&quot;, 42&#125;
	z :&#x3D; Person&#123;&quot;Zaphod Beeblebrox&quot;, 9001&#125;
	fmt.Println(a, z)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><ul>
<li><p>Go 程序使用 <code>error</code> 值来表示错误状态。</p>
<p>与 <code>fmt.Stringer</code> 类似，<code>error</code> 类型是一个内建接口：</p>
<pre class="line-numbers language-none"><code class="language-none">type error interface &#123;
    Error() string
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>（与 <code>fmt.Stringer</code> 类似，<code>fmt</code> 包在打印值时也会满足 <code>error</code>。）</p>
<p>通常函数会返回一个 <code>error</code> 值，调用的它的代码应当判断这个错误是否等于 <code>nil</code> 来进行错误处理。</p>
<pre class="line-numbers language-none"><code class="language-none">i, err :&#x3D; strconv.Atoi(&quot;42&quot;)
if err !&#x3D; nil &#123;
    fmt.Printf(&quot;couldn&#39;t convert number: %v\n&quot;, err)
    return
&#125;
fmt.Println(&quot;Converted integer:&quot;, i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>error</code> 为 nil 时表示成功；非 nil 的 <code>error</code> 表示失败。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

type MyError struct &#123;
	When time.Time
	What string
&#125;

func (e *MyError) Error() string &#123;
	return fmt.Sprintf(&quot;at %v, %s&quot;,
		e.When, e.What)
&#125;

func run() error &#123;
	return &amp;MyError&#123;
		time.Now(),
		&quot;it didn&#39;t work&quot;,
	&#125;
&#125;

func main() &#123;
	if err :&#x3D; run(); err !&#x3D; nil &#123;
		fmt.Println(err)
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h2><ul>
<li><p><code>io</code> 包指定了 <code>io.Reader</code> 接口，它表示从数据流的末尾进行读取。</p>
<p>Go 标准库包含了该接口的<a href="https://go-zh.org/search?q=Read#Global">许多实现</a>，包括文件、网络连接、压缩和加密等等。</p>
<p><code>io.Reader</code> 接口有一个 <code>Read</code> 方法：</p>
<pre class="line-numbers language-none"><code class="language-none">func (T) Read(b []byte) (n int, err error)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>Read</code> 用数据填充给定的字节切片并返回填充的字节数和错误值。在遇到数据流的结尾时，它会返回一个 <code>io.EOF</code> 错误。</p>
<p>示例代码创建了一个 <a href="https://go-zh.org/pkg/strings/#Reader"><code>strings.Reader</code></a> 并以每次 8 字节的速度读取它的输出。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;io&quot;
	&quot;strings&quot;
)

func main() &#123;
	r :&#x3D; strings.NewReader(&quot;Hello, Reader!&quot;)

	b :&#x3D; make([]byte, 8)
	for &#123;
		n, err :&#x3D; r.Read(b)
		fmt.Printf(&quot;n &#x3D; %v err &#x3D; %v b &#x3D; %v\n&quot;, n, err, b)
		fmt.Printf(&quot;b[:n] &#x3D; %q\n&quot;, b[:n])
		if err &#x3D;&#x3D; io.EOF &#123;
			break
		&#125;
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="rot13Reader"><a href="#rot13Reader" class="headerlink" title="rot13Reader"></a>rot13Reader</h3><ul>
<li><p>有种常见的模式是一个 <a href="https://go-zh.org/pkg/io/#Reader"><code>io.Reader</code></a> 包装另一个 <code>io.Reader</code>，然后通过某种方式修改其数据流。</p>
<p>例如，<a href="https://go-zh.org/pkg/compress/gzip/#NewReader"><code>gzip.NewReader</code></a> 函数接受一个 <code>io.Reader</code>（已压缩的数据流）并返回一个同样实现了 <code>io.Reader</code> 的 <code>*gzip.Reader</code>（解压后的数据流）。</p>
<p>编写一个实现了 <code>io.Reader</code> 并从另一个 <code>io.Reader</code> 中读取数据的 <code>rot13Reader</code>，通过应用 <a href="http://en.wikipedia.org/wiki/ROT13">rot13</a> 代换密码对数据流进行修改。</p>
<p><code>rot13Reader</code> 类型已经提供。实现 <code>Read</code> 方法以满足 <code>io.Reader</code>。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;io&quot;
	&quot;os&quot;
	&quot;strings&quot;
)

type rot13Reader struct &#123;
	r io.Reader
&#125;
&#x2F;&#x2F; 转换byte  前进13位&#x2F;后退13位
func rot13(b byte) byte &#123;
	switch &#123;
	case &#39;A&#39; &lt;&#x3D; b &amp;&amp; b &lt;&#x3D; &#39;M&#39;:
		b &#x3D; b + 13
	case &#39;M&#39; &lt; b &amp;&amp; b &lt;&#x3D; &#39;Z&#39;:
		b &#x3D; b - 13
	case &#39;a&#39; &lt;&#x3D; b &amp;&amp; b &lt;&#x3D; &#39;m&#39;:
		b &#x3D; b + 13
	case &#39;m&#39; &lt; b &amp;&amp; b &lt;&#x3D; &#39;z&#39;:
		b &#x3D; b - 13
	&#125;
	return b
&#125;
&#x2F;&#x2F; 重写Read方法
func (mr rot13Reader) Read(b []byte) (int, error) &#123;
	n, e :&#x3D; mr.r.Read(b)
	for i :&#x3D; 0; i &lt; n; i++ &#123;
		b[i] &#x3D; rot13(b[i])
	&#125;
	return n, e
&#125;
func main() &#123;
	s :&#x3D; strings.NewReader(&quot;Lbh penpxrq gur pbqr!&quot;)
	r :&#x3D; rot13Reader&#123;s&#125;
	io.Copy(os.Stdout, &amp;r)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><ul>
<li><p><a href="https://go-zh.org/pkg/image/#Image"><code>image</code></a> 包定义了 <code>Image</code> 接口：</p>
<pre class="line-numbers language-none"><code class="language-none">package image

type Image interface &#123;
    ColorModel() color.Model
    Bounds() Rectangle
    At(x, y int) color.Color
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意:</strong> <code>Bounds</code> 方法的返回值 <code>Rectangle</code> 实际上是一个 <a href="https://go-zh.org/pkg/image/#Rectangle"><code>image.Rectangle</code></a>，它在 <code>image</code> 包中声明。</p>
<p>（请参阅<a href="https://go-zh.org/pkg/image/#Image">文档</a>了解全部信息。）</p>
<p><code>color.Color</code> 和 <code>color.Model</code> 类型也是接口，但是通常因为直接使用预定义的实现 <code>image.RGBA</code> 和 <code>image.RGBAModel</code> 而被忽视了。这些接口和类型由 <a href="https://go-zh.org/pkg/image/color/"><code>image/color</code></a> 包定义。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;image&quot;
)

func main() &#123;
	m :&#x3D; image.NewRGBA(image.Rect(0, 0, 100, 100))
	fmt.Println(m.Bounds())
	fmt.Println(m.At(0, 0).RGBA())
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="图像练习"><a href="#图像练习" class="headerlink" title="图像练习"></a>图像练习</h3><ul>
<li><p>还记得之前编写的<a href="https://tour.go-zh.org/moretypes/18">图片生成器</a> 吗？我们再来编写另外一个，不过这次它将会返回一个 <code>image.Image</code> 的实现而非一个数据切片。</p>
<p>定义你自己的 <code>Image</code> 类型，实现<a href="https://go-zh.org/pkg/image/#Image">必要的方法</a>并调用 <code>pic.ShowImage</code>。</p>
<p><code>Bounds</code> 应当返回一个 <code>image.Rectangle</code> ，例如 <code>image.Rect(0, 0, w, h)</code>。</p>
<p><code>ColorModel</code> 应当返回 <code>color.RGBAModel</code>。</p>
<p>At<code>应当返回一个颜色。上一个图片生成器的值</code>v<code>对应于此次的</code>color.RGBA{v, v, 255, 255}</p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
    &quot;golang.org&#x2F;x&#x2F;tour&#x2F;pic&quot;
    &quot;image&#x2F;color&quot;
    &quot;image&quot;
)

type Image struct&#123;&#125;  &#x2F;&#x2F;新建一个Image结构体

func (i Image) ColorModel() color.Model&#123;  &#x2F;&#x2F;实现Image包中颜色模式的方法
    return color.RGBAModel
&#125;

func (i Image) Bounds() image.Rectangle&#123;  &#x2F;&#x2F;实现Image包中生成图片边界的方法
    return image.Rect(0,0,200,200)
&#125;

func (i Image) At(x,y int) color.Color&#123;  &#x2F;&#x2F;实现Image包中生成图像某个点的方法
    return color.RGBA&#123;uint8(x),uint8(y),uint8(255),uint8(255)&#125;
&#125;

func main() &#123;
    m :&#x3D; Image&#123;&#125;
    pic.ShowImage(m)  &#x2F;&#x2F;调用
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="go程"><a href="#go程" class="headerlink" title="go程"></a>go程</h3><ul>
<li><p>Go 程（goroutine）是由 Go 运行时管理的轻量级线程。</p>
<pre class="line-numbers language-none"><code class="language-none">go f(x, y, z)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>会启动一个新的 Go 程并执行</p>
<pre class="line-numbers language-none"><code class="language-none">f(x, y, z)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>f</code>, <code>x</code>, <code>y</code> 和 <code>z</code> 的求值发生在当前的 Go 程中，而 <code>f</code> 的执行发生在新的 Go 程中。</p>
<p>Go 程在相同的地址空间中运行，因此在访问共享的内存时必须进行同步。<a href="https://go-zh.org/pkg/sync/"><code>sync</code></a> 包提供了这种能力，不过在 Go 中并不经常用到，因为还有其它的办法。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

func say(s string) &#123;
	for i :&#x3D; 0; i &lt; 5; i++ &#123;
		time.Sleep(100 * time.Millisecond)
		fmt.Println(s)
	&#125;
&#125;

func main() &#123;
	go say(&quot;world&quot;)
	say(&quot;hello&quot;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h3><ul>
<li><p>信道是带有类型的管道，你可以通过它用信道操作符 <code>&lt;-</code> 来发送或者接收值。</p>
<pre class="line-numbers language-none"><code class="language-none">ch &lt;- v    &#x2F;&#x2F; 将 v 发送至信道 ch。
v :&#x3D; &lt;-ch  &#x2F;&#x2F; 从 ch 接收值并赋予 v。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>（“箭头”就是数据流的方向。）</p>
<p>和映射与切片一样，信道在使用前必须创建：</p>
<pre class="line-numbers language-none"><code class="language-none">ch :&#x3D; make(chan int)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>默认情况下，发送和接收操作在另一端准备好之前都会阻塞。这使得 Go 程可以在没有显式的锁或竞态变量的情况下进行同步。</p>
<p>以下示例对切片中的数进行求和，将任务分配给两个 Go 程。一旦两个 Go 程完成了它们的计算，它就能算出最终的结果。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func sum(s []int, c chan int) &#123;
	sum :&#x3D; 0
	for _, v :&#x3D; range s &#123;
		sum +&#x3D; v
	&#125;
	c &lt;- sum
&#125;

func main() &#123;
	s :&#x3D; []int&#123;7, 2, 8, -9, 4, 0&#125;
	c :&#x3D; make(chan int)

	&#x2F;&#x2F;go程前半部分
	go sum(s[:len(s)&#x2F;2], c)
	&#x2F;&#x2F;go程后半部分
	go sum(s[len(s)&#x2F;2:], c)

	x, y :&#x3D; &lt;-c, &lt;-c &#x2F;&#x2F; 从 c 中接收
	fmt.Println(x, y, x+y)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="带缓冲的信道"><a href="#带缓冲的信道" class="headerlink" title="带缓冲的信道"></a>带缓冲的信道</h3><ul>
<li><p>信道可以是 <em>带缓冲的</em>。将缓冲长度作为第二个参数提供给 <code>make</code> 来初始化一个带缓冲的信道：</p>
<pre class="line-numbers language-none"><code class="language-none">ch :&#x3D; make(chan int, 100)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>仅当信道的缓冲区填满后，向其发送数据时才会阻塞。当缓冲区为空时，接受方会阻塞。</p>
<p>修改示例填满缓冲区，然后看看会发生什么。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func main() &#123;
	ch :&#x3D; make(chan int, 3)
	ch &lt;- 1
	ch &lt;- 2
	ch &lt;- 3
	fmt.Println(&lt;-ch)
	fmt.Println(&lt;-ch)
	fmt.Println(&lt;-ch)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="range和close"><a href="#range和close" class="headerlink" title="range和close"></a>range和close</h3><ul>
<li><p>发送者可通过 <code>close</code> 关闭一个信道来表示没有需要发送的值了。接收者可以通过为接收表达式分配第二个参数来测试信道是否被关闭：若没有值可以接收且信道已被关闭，那么在执行完</p>
<pre class="line-numbers language-none"><code class="language-none">v, ok :&#x3D; &lt;-ch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>之后 <code>ok</code> 会被设置为 <code>false</code>。</p>
<p>循环 <code>for i := range c</code> 会不断从信道接收值，直到它被关闭。</p>
<p><em>注意：</em> 只有发送者才能关闭信道，而接收者不能。向一个已经关闭的信道发送数据会引发程序恐慌（panic）。</p>
<p><em>还要注意：</em> 信道与文件不同，通常情况下无需关闭它们。只有在必须告诉接收者不再有需要发送的值时才有必要关闭，例如终止一个 <code>range</code> 循环。</p>
<pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
)

func fibonacci(n int, c chan int) &#123;
	x, y :&#x3D; 0, 1
	for i :&#x3D; 0; i &lt; n; i++ &#123;
		c &lt;- x
		x, y &#x3D; y, x+y
	&#125;
	close(c)
&#125;

func main() &#123;
	c :&#x3D; make(chan int, 10)
	go fibonacci(cap(c), c)
	for i :&#x3D; range c &#123;
		fmt.Println(i)
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h3><ul>
<li><p><code>select</code> 语句使一个 Go 程可以等待多个通信操作。</p>
<p><code>select</code> 会阻塞到某个分支可以继续执行为止，这时就会执行该分支。当多个分支都准备好时会随机选择一个执行。</p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">package main

import &quot;fmt&quot;

func fibonacci(c, quit chan int) &#123;
	x, y :&#x3D; 0, 1
	for &#123;
		select &#123;
		case c &lt;- x:
			x, y &#x3D; y, x+y
		case &lt;-quit:
			fmt.Println(&quot;quit&quot;)
			return
		&#125;
	&#125;
&#125;

func main() &#123;
	c :&#x3D; make(chan int)
	quit :&#x3D; make(chan int)
	go func() &#123;
		for i :&#x3D; 0; i &lt; 10; i++ &#123;
			fmt.Println(&lt;-c)
		&#125;
		quit &lt;- 0
	&#125;()
	fibonacci(c, quit)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>默认选择</p>
<p>当 <code>select</code> 中的其它分支都没有准备好时，<code>default</code> 分支就会执行。</p>
<p>为了在尝试发送或者接收时不发生阻塞，可使用 <code>default</code> 分支：</p>
<pre class="line-numbers language-none"><code class="language-none">select &#123;
case i :&#x3D; &lt;-c:
    &#x2F;&#x2F; 使用 i
default:
    &#x2F;&#x2F; 从 c 中接收会阻塞时执行
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>示例</p>
<pre><code><pre class="line-numbers language-none"><code class="language-none">package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

func main() &#123;
	tick :&#x3D; time.Tick(100 * time.Millisecond)
	boom :&#x3D; time.After(500 * time.Millisecond)
	for &#123;
		select &#123;
		case &lt;-tick:
			fmt.Println(&quot;tick.&quot;)
		case &lt;-boom:
			fmt.Println(&quot;BOOM!&quot;)
			return
		default:
			fmt.Println(&quot;    .&quot;)
			time.Sleep(50 * time.Millisecond)
		&#125;
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 建站文档</title>
    <url>/2021/01/22/hexo-guide/</url>
    <content><![CDATA[<p>欢迎使用 Hexo，本文档将帮助您快速上手搭建一个属于你的hexo博客。</p>
<span id="more"></span>
<h2 id="什么是hexo"><a href="#什么是hexo" class="headerlink" title="什么是hexo?"></a>什么是hexo?</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="安装hexo需要的环境"><a href="#安装hexo需要的环境" class="headerlink" title="安装hexo需要的环境"></a>安装hexo需要的环境</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>
<ul>
<li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li><a href="http://git-scm.com/">Git</a></li>
</ul>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接按照下面的步骤安装 Hexo。</p>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="Node-js-版本限制"><a href="#Node-js-版本限制" class="headerlink" title="Node.js 版本限制"></a>Node.js 版本限制</h2><p>我们强烈建议永远安装最新版本的 Hexo，以及 推荐的 Node.js 版本。</p>
<table>
<thead>
<tr>
<th align="left">Hexo 版本</th>
<th align="left">最低兼容 Node.js 版本</th>
</tr>
</thead>
<tbody><tr>
<td align="left">6.0+</td>
<td align="left">12.13.0</td>
</tr>
<tr>
<td align="left">5.0+</td>
<td align="left">10.13.0</td>
</tr>
<tr>
<td align="left">4.1 - 4.2</td>
<td align="left">8.10</td>
</tr>
<tr>
<td align="left">4.0</td>
<td align="left">8.6</td>
</tr>
<tr>
<td align="left">3.3 - 3.9</td>
<td align="left">6.9</td>
</tr>
<tr>
<td align="left">3.2 - 3.3</td>
<td align="left">0.12</td>
</tr>
<tr>
<td align="left">3.0 - 3.1</td>
<td align="left">0.10 or iojs</td>
</tr>
<tr>
<td align="left">0.0.1 - 2.8</td>
<td align="left">0.10</td>
</tr>
</tbody></table>
<h2 id="Hexo-目录文件解析"><a href="#Hexo-目录文件解析" class="headerlink" title="Hexo 目录文件解析"></a>Hexo 目录文件解析</h2><p>新建完成后，指定文件夹的目录如下：</p>
<pre class="line-numbers language-none"><code class="language-none">.
├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的配置信息，您可以在此配置大部分的参数。</p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p>
<h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>
<h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p>
<h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>主题 文件夹。Hexo 会根据主题来生成静态页面。
 </p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-cpu-memory-check-tools</title>
    <url>/2019/12/08/linux-cpu-memory-check-tools/</url>
    <content><![CDATA[<p>下面是一些常用的运维命令组合，在Linux中如何查看CPU使用情况，如果查看内存使用情况，找出linux中最占用CUP或者内存的进行</p>
<span id="more"></span>
<p><strong>linux下获取占用CPU资源最多的10个进程，可以使用如下命令组合：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>linux下获取占用内存资源最多的10个进程，可以使用如下命令组合：</strong></p>
<pre class="line-numbers language-none"><code class="language-none">ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>查看占用cpu最高的进程</strong></p>
<pre class="line-numbers language-none"><code class="language-none">ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者top （然后按下M，注意这里是大写）</p>
<p><strong>查看占用内存最高的进程</strong></p>
<pre class="line-numbers language-none"><code class="language-none">ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者top （然后按下P，注意这里是大写）</p>
<p><strong>补充:内容解释</strong></p>
<ul>
<li>PID：进程的ID</li>
<li>USER：进程所有者</li>
<li>PR：进程的优先级别，越小越优先被执行</li>
<li>NInice：值</li>
<li>VIRT：进程占用的虚拟内存</li>
<li>RES：进程占用的物理内存</li>
<li>SHR：进程使用的共享内存</li>
<li>S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N- 表示该进程优先值为负数</li>
<li>%CPU：进程占用CPU的使用率</li>
<li>%MEM：进程使用的物理内存和总内存的百分比</li>
<li>TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。</li>
<li>COMMAND：进程启动命令名称</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>NoSQL 简介</title>
    <url>/2017/06/14/nosql/</url>
    <content><![CDATA[<p>NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”。</p>
<span id="more"></span>
<h2 id="NoSQL-简介"><a href="#NoSQL-简介" class="headerlink" title="NoSQL 简介"></a>NoSQL 简介</h2><p>在现代的计算系统上每天网络上都会产生庞大的数据量。</p>
<p>这些数据有很大一部分是由关系数据库管理系统（RDBMS）来处理。 1970年 E.F.Codd’s提出的关系模型的论文 “A relational model of data for large shared data banks”，这使得数据建模和应用程序编程更加简单。</p>
<p>通过应用实践证明，关系模型是非常适合于客户服务器编程，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。</p>
<p>NoSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</p>
<h2 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL?"></a>什么是NoSQL?</h2><p>NoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。</p>
<p>NoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p>
<h2 id="为什么使用NoSQL"><a href="#为什么使用NoSQL" class="headerlink" title="为什么使用NoSQL ?"></a>为什么使用NoSQL ?</h2><p>今天我们可以通过第三方平台（如：Google,Facebook等）可以很容易的访问和抓取数据。用户的个人信息，社交网络，地理位置，用户生成的数据和用户操作日志已经成倍的增加。我们如果要对这些用户数据进行挖掘，那SQL数据库已经不适合这些应用了, NoSQL 数据库的发展却能很好的处理这些大的数据。</p>
<h2 id="关系型数据库遵循ACID规则"><a href="#关系型数据库遵循ACID规则" class="headerlink" title="关系型数据库遵循ACID规则"></a>关系型数据库遵循ACID规则</h2><p>事务在英文中是transaction，和现实世界中的交易很类似，它有如下四个特性：</p>
<h3 id="1、A-Atomicity-原子性"><a href="#1、A-Atomicity-原子性" class="headerlink" title="1、A (Atomicity) 原子性"></a>1、A (Atomicity) 原子性</h3><p>原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。</p>
<p>比如银行转账，从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。</p>
<h3 id="2、C-Consistency-一致性"><a href="#2、C-Consistency-一致性" class="headerlink" title="2、C (Consistency) 一致性"></a>2、C (Consistency) 一致性</h3><p>一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。</p>
<p>例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。</p>
<h3 id="3、I-Isolation-独立性"><a href="#3、I-Isolation-独立性" class="headerlink" title="3、I (Isolation) 独立性"></a>3、I (Isolation) 独立性</h3><p>所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。</p>
<p>比如现在有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。</p>
<h3 id="4、D-Durability-持久性"><a href="#4、D-Durability-持久性" class="headerlink" title="4、D (Durability) 持久性"></a>4、D (Durability) 持久性</h3><p>持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</p>
]]></content>
      <categories>
        <category>NoSQL</category>
      </categories>
      <tags>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP date() 日期函数</title>
    <url>/2016/07/14/php_date/</url>
    <content><![CDATA[<p>PHP date() 日期函数的基本使用和用法案例。</p>
<span id="more"></span>
<h1 id="PHP-date-日期函数"><a href="#PHP-date-日期函数" class="headerlink" title="PHP date() 日期函数"></a>PHP date() 日期函数</h1><p>PHP date() 函数</p>
<p>PHP date() 函数用于格式化时间/日期。</p>
<h1 id="PHP-date-函数"><a href="#PHP-date-函数" class="headerlink" title="PHP date() 函数"></a>PHP date() 函数</h1><p>PHP date() 函数可把时间戳格式化为可读性更好的日期和时间。</p>
<p>时间戳是一个字符序列，表示一定的事件发生的日期/时间。</p>
<p>PHP Date() - 格式化日期</p>
<p>date() 函数的第一个必需参数 format 规定了如何格式化日期/时间。</p>
<p>这里列出了一些可用的字符：</p>
<p>d - 代表月中的天 (01 - 31)</p>
<p>m - 代表月 (01 - 12)</p>
<p>Y - 代表年 (四位数)</p>
<p>如需了解 format 参数中可用的所有字符列表，请查阅我们的 PHP Date 参考手册，date() 函数。</p>
<p>可以在字母之间插入其他字符，比如 “/“、”.” 或者 “-“，这样就可以增加附加格式了：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;?php
echo date(&quot;Y&#x2F;m&#x2F;d&quot;) . &quot;&lt;br&gt;&quot;;
echo date(&quot;Y.m.d&quot;) . &quot;&lt;br&gt;&quot;;
echo date(&quot;Y-m-d&quot;);
?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>格式字串可以识别以下 format 参数的字符串</p>
<p><img src="https://img.php.cn/upload/image/198/160/267/1475994567325219.png" alt="avatar"></p>
<p>例子</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;?php
echo &quot;date()函数输出格式化日期:&lt;br &#x2F;&gt;&quot;;
&#x2F;&#x2F; 常用
echo date(&quot;l&quot;) . &quot;&lt;br &#x2F;&gt;&quot;;&#x2F;&#x2F; 注意是字符L的小写，不是1，也不是竖线
echo date(&quot;Y-m-d H:i:s&quot;) . &quot;&lt;br &#x2F;&gt;&quot;;
echo date(&quot;Y&#x2F;m&#x2F;d&quot;) . &quot;&lt;br &#x2F;&gt;&quot;;
echo date(&quot;Y年m月d日 H时i分s秒&quot;) . &quot;&lt;br &#x2F;&gt;&quot;;
&#x2F;&#x2F; 从日期格式的字符串中获取日期2005-03-21
echo date(&quot;Y-m-d&quot;,strtotime(&quot;2005-03-21 11:15:38&quot;)).&quot;&lt;br &#x2F;&gt;&quot;;
echo date(&quot;Y-m-d&quot;,strtotime(&quot;-1 days&quot;)).&quot;&lt;br &#x2F;&gt;&quot;;&#x2F;&#x2F; 昨天的日期
echo date(&quot;Y-m-d&quot;,strtotime(&quot;-1 week&quot;)).&quot;&lt;br &#x2F;&gt;&quot;;&#x2F;&#x2F; 上个星期今天的日期
echo date(&quot;Y-m-d&quot;,strtotime(&quot;-1 month&quot;)).&quot;&lt;br &#x2F;&gt;&quot;;&#x2F;&#x2F; 上个月今天的日期
echo date(&quot;Y-m-d H&quot;,strtotime(&quot;next Thursday&quot;));&#x2F;&#x2F; 下个周四的日期和小
echo date(&#39;Y-m-d&#39;,strtotime(&#39;2015-06-08 -2 days&#39;)); &#x2F;&#x2F; 某个日期的前n天
?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>date</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序scroll-view之scroll-into-view不生效</title>
    <url>/2022/12/20/scroll-view/</url>
    <content><![CDATA[<p>在做一个聊天页面时，使用scroll-view显示聊天列表内容，需求每次内容的更新都能定位到最新的内容部分。</p>
<span id="more"></span>
<p><strong>在网上查了一遍，给出的答案有：</strong></p>
<ul>
<li>给scroll-view必须设置上scroll-y或者scroll-x为true（必须要的）</li>
<li>scroll-into-view初始化设置的时候，可能因为页面或者数据未加载不能跳转。需要在js里手动setData一下。</li>
</ul>
<p>按照上面的修改之后还是没有效果，最后在某个大佬的博客中看到类似例子，是由于我把scroll-view的高度设置成100%而不是具体的数字。</p>
]]></content>
      <tags>
        <tag>scroll-view</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题2020最新总结</title>
    <url>/2020/05/14/view_test/</url>
    <content><![CDATA[<p>前端面试题2020最新总结</p>
<span id="more"></span>
<h1 id="ES6新语法和特性"><a href="#ES6新语法和特性" class="headerlink" title="ES6新语法和特性"></a>ES6新语法和特性</h1><h2 id="使用let-cost-var申明变量时有什么样的区别？"><a href="#使用let-cost-var申明变量时有什么样的区别？" class="headerlink" title="使用let,cost,var申明变量时有什么样的区别？"></a>使用let,cost,var申明变量时有什么样的区别？</h2><p>1.不存在对应的变量提升<br>2.同一个作用域下是不能重复定义同一个名称<br>3.有着严格的作用域<br>4.const声明一个只读的常量,常量的值不能被改变,const一定要进行初始化,不准只声明不赋值</p>
<h2 id="箭头函数-简化了函数的定义"><a href="#箭头函数-简化了函数的定义" class="headerlink" title="箭头函数(简化了函数的定义)"></a>箭头函数(简化了函数的定义)</h2><h2 id="数据结构-Set-Map"><a href="#数据结构-Set-Map" class="headerlink" title="数据结构,Set,Map"></a>数据结构,Set,Map</h2><p>1.set类似于数组，成员唯一</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;自动去重数据
var arr &#x3D; [1,2,2,3,5,5,8];
var newarr &#x3D; [...new Set(arr)];
console.log(newarr);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>2.map以键值对的方式存储数据</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;forEach遍历
map.forEach(function(value,key)&#123;
　console.log(value,key);
&#125;);
&#x2F;&#x2F;for-of遍历
&#x2F;&#x2F;遍历结果是数组
①for(let item of map)&#123;

&#125;
&#x2F;&#x2F;遍历属性值
②for(let item of map.values())&#123;

&#125;
&#x2F;&#x2F;遍历属性
③for(let item of map.keys())&#123;

&#125;
&#x2F;&#x2F;entries遍历：遍历结果同forEach

for(let item of map.entries())&#123;

&#125;
　　　　<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue_shop api文档</title>
    <url>/2019/05/14/vueShop_api/</url>
    <content><![CDATA[<p>电商管理后台 API 接口文档</p>
<span id="more"></span>
<h1 id="1-电商管理后台-API-接口文档"><a href="#1-电商管理后台-API-接口文档" class="headerlink" title="1. 电商管理后台 API 接口文档"></a>1. 电商管理后台 API 接口文档</h1><h2 id="1-1-API-V1-接口说明"><a href="#1-1-API-V1-接口说明" class="headerlink" title="1.1. API V1 接口说明"></a>1.1. API V1 接口说明</h2><ul>
<li>接口基准地址：<code>http://127.0.0.1:8888/api/private/v1/</code></li>
<li>服务端已开启 CORS 跨域支持</li>
<li>API V1 认证统一使用 Token 认证</li>
<li>需要授权的 API ，必须在请求头中使用 <code>Authorization</code> 字段提供 <code>token</code> 令牌</li>
<li>使用 HTTP Status Code 标识状态</li>
<li>数据返回格式统一使用 JSON</li>
</ul>
<h3 id="1-1-1-支持的请求方法"><a href="#1-1-1-支持的请求方法" class="headerlink" title="1.1.1. 支持的请求方法"></a>1.1.1. 支持的请求方法</h3><ul>
<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>
<li>POST（CREATE）：在服务器新建一个资源。</li>
<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>
<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>
<li>DELETE（DELETE）：从服务器删除资源。</li>
<li>HEAD：获取资源的元数据。</li>
<li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li>
</ul>
<h3 id="1-1-2-通用返回状态说明"><a href="#1-1-2-通用返回状态说明" class="headerlink" title="1.1.2. 通用返回状态说明"></a>1.1.2. 通用返回状态说明</h3><table>
<thead>
<tr>
<th><em>状态码</em></th>
<th><em>含义</em></th>
<th><em>说明</em></th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td>请求成功</td>
</tr>
<tr>
<td>201</td>
<td>CREATED</td>
<td>创建成功</td>
</tr>
<tr>
<td>204</td>
<td>DELETED</td>
<td>删除成功</td>
</tr>
<tr>
<td>400</td>
<td>BAD REQUEST</td>
<td>请求的地址不存在或者包含不支持的参数</td>
</tr>
<tr>
<td>401</td>
<td>UNAUTHORIZED</td>
<td>未授权</td>
</tr>
<tr>
<td>403</td>
<td>FORBIDDEN</td>
<td>被禁止访问</td>
</tr>
<tr>
<td>404</td>
<td>NOT FOUND</td>
<td>请求的资源不存在</td>
</tr>
<tr>
<td>422</td>
<td>Unprocesable entity</td>
<td>[POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误</td>
</tr>
<tr>
<td>500</td>
<td>INTERNAL SERVER ERROR</td>
<td>内部错误</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<hr>
<h2 id="1-2-登录"><a href="#1-2-登录" class="headerlink" title="1.2. 登录"></a>1.2. 登录</h2><h3 id="1-2-1-登录验证接口"><a href="#1-2-1-登录验证接口" class="headerlink" title="1.2.1. 登录验证接口"></a>1.2.1. 登录验证接口</h3><ul>
<li>请求路径：login</li>
<li>请求方法：post</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>username</td>
<td>用户名</td>
<td>不能为空</td>
</tr>
<tr>
<td>password</td>
<td>密码</td>
<td>不能为空</td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户 ID</td>
<td></td>
</tr>
<tr>
<td>rid</td>
<td>用户角色 ID</td>
<td></td>
</tr>
<tr>
<td>username</td>
<td>用户名</td>
<td></td>
</tr>
<tr>
<td>mobile</td>
<td>手机号</td>
<td></td>
</tr>
<tr>
<td>email</td>
<td>邮箱</td>
<td></td>
</tr>
<tr>
<td>token</td>
<td>令牌</td>
<td>基于 jwt 的令牌</td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
        <span class="token property">"rid"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>
        <span class="token property">"mobile"</span><span class="token operator">:</span> <span class="token string">"123"</span><span class="token punctuation">,</span>
        <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"123@qq.com"</span><span class="token punctuation">,</span>
        <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjUwMCwicmlkIjowLCJpYXQiOjE1MTI1NDQyOTksImV4cCI6MTUxMjYzMDY5OX0.eGrsrvwHm-tPsO9r_pxHIQ5i5L1kX9RX444uwnRGaIM"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"登录成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="1-3-用户管理"><a href="#1-3-用户管理" class="headerlink" title="1.3. 用户管理"></a>1.3. 用户管理</h2><h3 id="1-3-1-用户数据列表"><a href="#1-3-1-用户数据列表" class="headerlink" title="1.3.1. 用户数据列表"></a>1.3.1. 用户数据列表</h3><ul>
<li>请求路径：users</li>
<li>请求方法：get</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>query</td>
<td>查询参数</td>
<td>可以为空</td>
</tr>
<tr>
<td>pagenum</td>
<td>当前页码</td>
<td>不能为空</td>
</tr>
<tr>
<td>pagesize</td>
<td>每页显示条数</td>
<td>不能为空</td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>totalpage</td>
<td>总记录数</td>
<td></td>
</tr>
<tr>
<td>pagenum</td>
<td>当前页码</td>
<td></td>
</tr>
<tr>
<td>users</td>
<td>用户数据集合</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"totalpage"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
        <span class="token property">"pagenum"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
        <span class="token property">"users"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">&#123;</span>
                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
                <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"tige117"</span><span class="token punctuation">,</span>
                <span class="token property">"mobile"</span><span class="token operator">:</span> <span class="token string">"18616358651"</span><span class="token punctuation">,</span>
                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"tige112@163.com"</span><span class="token punctuation">,</span>
                <span class="token property">"create_time"</span><span class="token operator">:</span> <span class="token string">"2017-11-09T20:36:26.000Z"</span><span class="token punctuation">,</span>
                <span class="token property">"mg_state"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 当前用户的状态</span>
                <span class="token property">"role_name"</span><span class="token operator">:</span> <span class="token string">"炒鸡管理员"</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"获取成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-3-2-添加用户"><a href="#1-3-2-添加用户" class="headerlink" title="1.3.2. 添加用户"></a>1.3.2. 添加用户</h3><ul>
<li>请求路径：users</li>
<li>请求方法：post</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>username</td>
<td>用户名称</td>
<td>不能为空</td>
</tr>
<tr>
<td>password</td>
<td>用户密码</td>
<td>不能为空</td>
</tr>
<tr>
<td>email</td>
<td>邮箱</td>
<td>可以为空</td>
</tr>
<tr>
<td>mobile</td>
<td>手机号</td>
<td>可以为空</td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户 ID</td>
<td></td>
</tr>
<tr>
<td>rid</td>
<td>用户角色 ID</td>
<td></td>
</tr>
<tr>
<td>username</td>
<td>用户名</td>
<td></td>
</tr>
<tr>
<td>mobile</td>
<td>手机号</td>
<td></td>
</tr>
<tr>
<td>email</td>
<td>邮箱</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>
        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"tige1200"</span><span class="token punctuation">,</span>
        <span class="token property">"mobile"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>
        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">"openid"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
        <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"test@test.com"</span><span class="token punctuation">,</span>
        <span class="token property">"create_time"</span><span class="token operator">:</span> <span class="token string">"2017-11-10T03:47:13.533Z"</span><span class="token punctuation">,</span>
        <span class="token property">"modify_time"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">"is_delete"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">"is_active"</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"用户创建成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">201</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-3-3-修改用户状态"><a href="#1-3-3-修改用户状态" class="headerlink" title="1.3.3. 修改用户状态"></a>1.3.3. 修改用户状态</h3><ul>
<li>请求路径：users/:uId/state/:type</li>
<li>请求方法：put</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>uId</td>
<td>用户 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>type</td>
<td>用户状态</td>
<td>不能为空<code>携带在url中</code>，值为 true 或者 false</td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">566</span><span class="token punctuation">,</span>
    <span class="token property">"rid"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>
    <span class="token property">"mobile"</span><span class="token operator">:</span> <span class="token string">"123456"</span><span class="token punctuation">,</span>
    <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"bb@itcast.com"</span><span class="token punctuation">,</span>
    <span class="token property">"mg_state"</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"设置状态成功"</span><span class="token punctuation">,</span>
    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-3-4-根据-ID-查询用户信息"><a href="#1-3-4-根据-ID-查询用户信息" class="headerlink" title="1.3.4. 根据 ID 查询用户信息"></a>1.3.4. 根据 ID 查询用户信息</h3><ul>
<li>请求路径：users/:id</li>
<li>请求方法：get</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户 ID</td>
<td></td>
</tr>
<tr>
<td>role_id</td>
<td>角色 ID</td>
<td></td>
</tr>
<tr>
<td>mobile</td>
<td>手机号</td>
<td></td>
</tr>
<tr>
<td>email</td>
<td>邮箱</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">503</span><span class="token punctuation">,</span>
        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"admin3"</span><span class="token punctuation">,</span>
        <span class="token property">"role_id"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">"mobile"</span><span class="token operator">:</span> <span class="token string">"00000"</span><span class="token punctuation">,</span>
        <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"new@new.com"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"查询成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-3-5-编辑用户提交"><a href="#1-3-5-编辑用户提交" class="headerlink" title="1.3.5. 编辑用户提交"></a>1.3.5. 编辑用户提交</h3><ul>
<li>请求路径：users/:id</li>
<li>请求方法：put</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户 id</td>
<td>不能为空 <code>参数是url参数:id</code></td>
</tr>
<tr>
<td>email</td>
<td>邮箱</td>
<td>可以为空</td>
</tr>
<tr>
<td>mobile</td>
<td>手机号</td>
<td>可以为空</td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户 ID</td>
<td></td>
</tr>
<tr>
<td>role_id</td>
<td>角色 ID</td>
<td></td>
</tr>
<tr>
<td>mobile</td>
<td>手机号</td>
<td></td>
</tr>
<tr>
<td>email</td>
<td>邮箱</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">/* 200表示成功，500表示失败 */</span>
<span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">503</span><span class="token punctuation">,</span>
        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"admin3"</span><span class="token punctuation">,</span>
        <span class="token property">"role_id"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">"mobile"</span><span class="token operator">:</span> <span class="token string">"111"</span><span class="token punctuation">,</span>
        <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"123@123.com"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"更新成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-3-6-删除单个用户"><a href="#1-3-6-删除单个用户" class="headerlink" title="1.3.6. 删除单个用户"></a>1.3.6. 删除单个用户</h3><ul>
<li>请求路径：users/:id</li>
<li>请求方法：delete</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户 id</td>
<td>不能为空<code>参数是url参数:id</code></td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"删除成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-3-7-分配用户角色"><a href="#1-3-7-分配用户角色" class="headerlink" title="1.3.7. 分配用户角色"></a>1.3.7. 分配用户角色</h3><ul>
<li>请求路径：users/:id/role</li>
<li>请求方法：put</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户 ID</td>
<td>不能为空<code>参数是url参数:id</code></td>
</tr>
<tr>
<td>rid</td>
<td>角色 id</td>
<td>不能为空<code>参数body参数</code></td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>用户 ID</td>
<td></td>
</tr>
<tr>
<td>role_id</td>
<td>角色 ID</td>
<td></td>
</tr>
<tr>
<td>mobile</td>
<td>手机号</td>
<td></td>
</tr>
<tr>
<td>email</td>
<td>邮箱</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">508</span><span class="token punctuation">,</span>
        <span class="token property">"rid"</span><span class="token operator">:</span> <span class="token string">"30"</span><span class="token punctuation">,</span>
        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"asdf1"</span><span class="token punctuation">,</span>
        <span class="token property">"mobile"</span><span class="token operator">:</span> <span class="token string">"123123"</span><span class="token punctuation">,</span>
        <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"adfsa@qq.com"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"设置角色成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="1-4-权限管理"><a href="#1-4-权限管理" class="headerlink" title="1.4. 权限管理"></a>1.4. 权限管理</h2><h3 id="1-4-1-所有权限列表"><a href="#1-4-1-所有权限列表" class="headerlink" title="1.4.1. 所有权限列表"></a>1.4.1. 所有权限列表</h3><ul>
<li>请求路径：rights/:type</li>
<li>请求方法：get</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>类型</td>
<td>值 list 或 tree , list 列表显示权限, tree 树状显示权限,<code>参数是url参数:type</code></td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>权限 ID</td>
<td></td>
</tr>
<tr>
<td>authName</td>
<td>权限说明</td>
<td></td>
</tr>
<tr>
<td>level</td>
<td>权限层级</td>
<td></td>
</tr>
<tr>
<td>pid</td>
<td>权限父 ID</td>
<td></td>
</tr>
<tr>
<td>path</td>
<td>对应访问路径</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>响应数据 type=list</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">  <span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span>
            <span class="token property">"authName"</span><span class="token operator">:</span> <span class="token string">"商品管理"</span><span class="token punctuation">,</span>
            <span class="token property">"level"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token null keyword">null</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">102</span><span class="token punctuation">,</span>
            <span class="token property">"authName"</span><span class="token operator">:</span> <span class="token string">"订单管理"</span><span class="token punctuation">,</span>
            <span class="token property">"level"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token null keyword">null</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"获取权限列表成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>type=tree</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      id<span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span>
      authName<span class="token operator">:</span> '商品管理'<span class="token punctuation">,</span>
      path<span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
      pid<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      children<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          id<span class="token operator">:</span> <span class="token number">104</span><span class="token punctuation">,</span>
          authName<span class="token operator">:</span> '商品列表'<span class="token punctuation">,</span>
          path<span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
          pid<span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span>
          children<span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">&#123;</span>
              id<span class="token operator">:</span> <span class="token number">105</span><span class="token punctuation">,</span>
              authName<span class="token operator">:</span> '添加商品'<span class="token punctuation">,</span>
              path<span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
              pid<span class="token operator">:</span> '<span class="token number">104</span><span class="token punctuation">,</span><span class="token number">101</span>'
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    msg<span class="token operator">:</span> '获取权限列表成功'<span class="token punctuation">,</span>
    status<span class="token operator">:</span> <span class="token number">200</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-4-2-左侧菜单权限"><a href="#1-4-2-左侧菜单权限" class="headerlink" title="1.4.2. 左侧菜单权限"></a>1.4.2. 左侧菜单权限</h3><ul>
<li>请求路径：menus</li>
<li>请求方法：get</li>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span>
            <span class="token property">"authName"</span><span class="token operator">:</span> <span class="token string">"商品管理"</span><span class="token punctuation">,</span>
            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">104</span><span class="token punctuation">,</span>
                    <span class="token property">"authName"</span><span class="token operator">:</span> <span class="token string">"商品列表"</span><span class="token punctuation">,</span>
                    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
                    <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"获取菜单列表成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="1-5-角色管理"><a href="#1-5-角色管理" class="headerlink" title="1.5. 角色管理"></a>1.5. 角色管理</h2><h3 id="1-5-1-角色列表"><a href="#1-5-1-角色列表" class="headerlink" title="1.5.1. 角色列表"></a>1.5.1. 角色列表</h3><ul>
<li><p>请求路径：roles</p>
</li>
<li><p>请求方法：get</p>
</li>
<li><p>响应数据说明</p>
<ul>
<li>第一层为角色信息</li>
</ul>
<ul>
<li>第二层开始为权限说明，权限一共有 3 层权限</li>
<li>最后一层权限，不包含 <code>children</code> 属性</li>
</ul>
</li>
<li><p>响应数据</p>
</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
            <span class="token property">"roleName"</span><span class="token operator">:</span> <span class="token string">"主管"</span><span class="token punctuation">,</span>
            <span class="token property">"roleDesc"</span><span class="token operator">:</span> <span class="token string">"技术负责人"</span><span class="token punctuation">,</span>
            <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span>
                    <span class="token property">"authName"</span><span class="token operator">:</span> <span class="token string">"商品管理"</span><span class="token punctuation">,</span>
                    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
                    <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                        <span class="token punctuation">&#123;</span>
                            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">104</span><span class="token punctuation">,</span>
                            <span class="token property">"authName"</span><span class="token operator">:</span> <span class="token string">"商品列表"</span><span class="token punctuation">,</span>
                            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
                            <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                                <span class="token punctuation">&#123;</span>
                                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">105</span><span class="token punctuation">,</span>
                                    <span class="token property">"authName"</span><span class="token operator">:</span> <span class="token string">"添加商品"</span><span class="token punctuation">,</span>
                                    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token null keyword">null</span>
                                <span class="token punctuation">&#125;</span>
                            <span class="token punctuation">]</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">]</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"获取成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-5-2-添加角色"><a href="#1-5-2-添加角色" class="headerlink" title="1.5.2. 添加角色"></a>1.5.2. 添加角色</h3><ul>
<li>请求路径：roles</li>
<li>请求方法：post</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>roleName</td>
<td>角色名称</td>
<td>不能为空</td>
</tr>
<tr>
<td>roleDesc</td>
<td>角色描述</td>
<td>可以为空</td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>roleId</td>
<td>角色 ID</td>
<td></td>
</tr>
<tr>
<td>roleName</td>
<td>角色名称</td>
<td></td>
</tr>
<tr>
<td>roleDesc</td>
<td>角色描述</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"roleId"</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>
        <span class="token property">"roleName"</span><span class="token operator">:</span> <span class="token string">"admin2"</span><span class="token punctuation">,</span>
        <span class="token property">"roleDesc"</span><span class="token operator">:</span> <span class="token string">"admin2Desc"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"创建成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">201</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-5-3-根据-ID-查询角色"><a href="#1-5-3-根据-ID-查询角色" class="headerlink" title="1.5.3. 根据 ID 查询角色"></a>1.5.3. 根据 ID 查询角色</h3><ul>
<li>请求路径：roles/:id</li>
<li>请求方法：get</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>:id</td>
<td>角色 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>roleId</td>
<td>角色 ID</td>
<td></td>
</tr>
<tr>
<td>roleName</td>
<td>角色名称</td>
<td></td>
</tr>
<tr>
<td>roleDesc</td>
<td>角色描述</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"roleId"</span><span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span>
        <span class="token property">"roleName"</span><span class="token operator">:</span> <span class="token string">"测试角色"</span><span class="token punctuation">,</span>
        <span class="token property">"roleDesc"</span><span class="token operator">:</span> <span class="token string">"测试负责人"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"获取成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-5-4-编辑提交角色"><a href="#1-5-4-编辑提交角色" class="headerlink" title="1.5.4. 编辑提交角色"></a>1.5.4. 编辑提交角色</h3><ul>
<li>请求路径：roles/:id</li>
<li>请求方法：put</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>:id</td>
<td>角色 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>roleName</td>
<td>角色名称</td>
<td>不能为空</td>
</tr>
<tr>
<td>roleDesc</td>
<td>角色描述</td>
<td>可以为空</td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"roleId"</span><span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span>
        <span class="token property">"roleName"</span><span class="token operator">:</span> <span class="token string">"测试角色"</span><span class="token punctuation">,</span>
        <span class="token property">"roleDesc"</span><span class="token operator">:</span> <span class="token string">"测试角色描述"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"获取成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-5-5-删除角色"><a href="#1-5-5-删除角色" class="headerlink" title="1.5.5. 删除角色"></a>1.5.5. 删除角色</h3><ul>
<li>请求路径：roles/:id</li>
<li>请求方法：delete</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>:id</td>
<td>角色 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"删除成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-5-6-角色授权"><a href="#1-5-6-角色授权" class="headerlink" title="1.5.6. 角色授权"></a>1.5.6. 角色授权</h3><ul>
<li>请求路径：roles/:roleId/rights</li>
<li>请求方法：post</li>
<li>请求参数：通过 <code>请求体</code> 发送给后端</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>:roleId</td>
<td>角色 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>rids</td>
<td>权限 ID 列表（字符串）</td>
<td>以 <code>,</code> 分割的权限 ID 列表（获取所有被选中、叶子节点的key和半选中节点的key, 包括 1，2，3级节点）</td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"更新成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-5-7-删除角色指定权限"><a href="#1-5-7-删除角色指定权限" class="headerlink" title="1.5.7. 删除角色指定权限"></a>1.5.7. 删除角色指定权限</h3><ul>
<li><p>请求路径：roles/:roleId/rights/:rightId</p>
</li>
<li><p>请求方法：delete</p>
</li>
<li><p>请求参数</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>:roleId</td>
<td>角色 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>:rightId</td>
<td>权限 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
</tbody></table>
</li>
<li><p>响应数据说明 </p>
<ul>
<li>返回的data, 是当前角色下最新的权限数据</li>
</ul>
</li>
<li><p>响应数据</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span>
            <span class="token property">"authName"</span><span class="token operator">:</span> <span class="token string">"商品管理"</span><span class="token punctuation">,</span>
            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
            <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">104</span><span class="token punctuation">,</span>
                    <span class="token property">"authName"</span><span class="token operator">:</span> <span class="token string">"商品列表"</span><span class="token punctuation">,</span>
                    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
                    <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                        <span class="token punctuation">&#123;</span>
                            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">105</span><span class="token punctuation">,</span>
                            <span class="token property">"authName"</span><span class="token operator">:</span> <span class="token string">"添加商品"</span><span class="token punctuation">,</span>
                            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token null keyword">null</span>
                        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                        <span class="token punctuation">&#123;</span>
                            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">116</span><span class="token punctuation">,</span>
                            <span class="token property">"authName"</span><span class="token operator">:</span> <span class="token string">"修改"</span><span class="token punctuation">,</span>
                            <span class="token property">"path"</span><span class="token operator">:</span> <span class="token null keyword">null</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">]</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"取消权限成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="1-6-商品分类管理"><a href="#1-6-商品分类管理" class="headerlink" title="1.6. 商品分类管理"></a>1.6. 商品分类管理</h2><h3 id="1-6-1-商品分类数据列表"><a href="#1-6-1-商品分类数据列表" class="headerlink" title="1.6.1. 商品分类数据列表"></a>1.6.1. 商品分类数据列表</h3><ul>
<li>请求路径：categories</li>
<li>请求方法：get</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>[1,2,3]</td>
<td>值：1，2，3 分别表示显示一层二层三层分类列表<br />【可选参数】如果不传递，则默认获取所有级别的分类</td>
</tr>
<tr>
<td>pagenum</td>
<td>当前页码值</td>
<td>【可选参数】如果不传递，则默认获取所有分类</td>
</tr>
<tr>
<td>pagesize</td>
<td>每页显示多少条数据</td>
<td>【可选参数】如果不传递，则默认获取所有分类</td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>cat_id</td>
<td>分类 ID</td>
<td></td>
</tr>
<tr>
<td>cat_name</td>
<td>分类名称</td>
<td></td>
</tr>
<tr>
<td>cat_pid</td>
<td>分类父 ID</td>
<td></td>
</tr>
<tr>
<td>cat_level</td>
<td>分类当前层级</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"cat_id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token property">"cat_name"</span><span class="token operator">:</span> <span class="token string">"大家电"</span><span class="token punctuation">,</span>
            <span class="token property">"cat_pid"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">"cat_level"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">"cat_deleted"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token property">"cat_id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
                    <span class="token property">"cat_name"</span><span class="token operator">:</span> <span class="token string">"电视"</span><span class="token punctuation">,</span>
                    <span class="token property">"cat_pid"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token property">"cat_level"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    <span class="token property">"cat_deleted"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                        <span class="token punctuation">&#123;</span>
                            <span class="token property">"cat_id"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
                            <span class="token property">"cat_name"</span><span class="token operator">:</span> <span class="token string">"曲面电视"</span><span class="token punctuation">,</span>
                            <span class="token property">"cat_pid"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
                            <span class="token property">"cat_level"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                            <span class="token property">"cat_deleted"</span><span class="token operator">:</span> <span class="token boolean">false</span>
                        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                        <span class="token punctuation">&#123;</span>
                            <span class="token property">"cat_id"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
                            <span class="token property">"cat_name"</span><span class="token operator">:</span> <span class="token string">"海信"</span><span class="token punctuation">,</span>
                            <span class="token property">"cat_pid"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
                            <span class="token property">"cat_level"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                            <span class="token property">"cat_deleted"</span><span class="token operator">:</span> <span class="token boolean">false</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">]</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"获取成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-6-2-添加分类"><a href="#1-6-2-添加分类" class="headerlink" title="1.6.2. 添加分类"></a>1.6.2. 添加分类</h3><ul>
<li>请求路径：categories</li>
<li>请求方法：post</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>cat_pid</td>
<td>分类父 ID</td>
<td>不能为空，如果要添加1级分类，则父分类Id应该设置为  <code>0</code></td>
</tr>
<tr>
<td>cat_name</td>
<td>分类名称</td>
<td>不能为空</td>
</tr>
<tr>
<td>cat_level</td>
<td>分类层级</td>
<td>不能为空，<code>0</code>表示一级分类；<code>1</code>表示二级分类；<code>2</code>表示三级分类</td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"cat_id"</span><span class="token operator">:</span> <span class="token number">62</span><span class="token punctuation">,</span>
        <span class="token property">"cat_name"</span><span class="token operator">:</span> <span class="token string">"相框"</span><span class="token punctuation">,</span>
        <span class="token property">"cat_pid"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>
        <span class="token property">"cat_level"</span><span class="token operator">:</span> <span class="token string">"1"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"创建成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">201</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-6-3-根据-id-查询分类"><a href="#1-6-3-根据-id-查询分类" class="headerlink" title="1.6.3. 根据 id 查询分类"></a>1.6.3. 根据 id 查询分类</h3><ul>
<li>请求路径：categories/:id</li>
<li>请求方法：get</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>:id</td>
<td>分类 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;cat_id&quot;: 3,
        &quot;cat_name&quot;: &quot;厨卫电器&quot;,
        &quot;cat_pid&quot;: 0,
        &quot;cat_level&quot;: 0
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;获取成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-6-4-编辑提交分类"><a href="#1-6-4-编辑提交分类" class="headerlink" title="1.6.4. 编辑提交分类"></a>1.6.4. 编辑提交分类</h3><ul>
<li>请求路径：categories/:id</li>
<li>请求方法：put</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>:id</td>
<td>分类 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>cat_name</td>
<td>分类名称</td>
<td>不能为空【此参数，放到请求体中】</td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;cat_id&quot;: 22,
        &quot;cat_name&quot;: &quot;自拍杆&quot;,
        &quot;cat_pid&quot;: 7,
        &quot;cat_level&quot;: 2
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;更新成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-6-5-删除分类"><a href="#1-6-5-删除分类" class="headerlink" title="1.6.5. 删除分类"></a>1.6.5. 删除分类</h3><ul>
<li>请求路径：categories/:id</li>
<li>请求方法：delete</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>:id</td>
<td>分类 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: null,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;删除成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="1-7-分类参数管理"><a href="#1-7-分类参数管理" class="headerlink" title="1.7. 分类参数管理"></a>1.7. 分类参数管理</h2><h3 id="1-7-1-参数列表"><a href="#1-7-1-参数列表" class="headerlink" title="1.7.1. 参数列表"></a>1.7.1. 参数列表</h3><ul>
<li>请求路径：categories/:id/attributes</li>
<li>请求方法：get</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>:id</td>
<td>分类 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>sel</td>
<td>[only,many]</td>
<td>不能为空,通过 only 或 many 来获取分类静态参数还是动态参数</td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>attr_id</td>
<td>分类参数 ID</td>
<td></td>
</tr>
<tr>
<td>attr_name</td>
<td>分类参数名称</td>
<td></td>
</tr>
<tr>
<td>cat_id</td>
<td>分类参数所属分类</td>
<td></td>
</tr>
<tr>
<td>attr_sel</td>
<td>only:输入框(唯一) many:后台下拉列表/前台单选框</td>
<td></td>
</tr>
<tr>
<td>attr_write</td>
<td>manual:手工录入 list:从列表选择</td>
<td></td>
</tr>
<tr>
<td>attr_vals</td>
<td>如果 attr_write:list,那么有值，该值以逗号分隔</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: [
        &#123;
            &quot;attr_id&quot;: 1,
            &quot;attr_name&quot;: &quot;cpu&quot;,
            &quot;cat_id&quot;: 22,
            &quot;attr_sel&quot;: &quot;only&quot;,
            &quot;attr_write&quot;: &quot;manual&quot;,
            &quot;attr_vals&quot;: &quot;ffff&quot;
        &#125;
    ],
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;获取成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-7-2-添加动态参数或者静态属性"><a href="#1-7-2-添加动态参数或者静态属性" class="headerlink" title="1.7.2. 添加动态参数或者静态属性"></a>1.7.2. 添加动态参数或者静态属性</h3><ul>
<li>请求路径：categories/:id/attributes</li>
<li>请求方法：post</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>:id</td>
<td>分类 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>attr_name</td>
<td>参数名称</td>
<td>不能为空</td>
</tr>
<tr>
<td>attr_sel</td>
<td>[only,many]</td>
<td>不能为空</td>
</tr>
<tr>
<td>attr_vals</td>
<td>如果是 many 就需要填写值的选项，以逗号分隔</td>
<td>【可选参数】</td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;attr_id&quot;: 44,
        &quot;attr_name&quot;: &quot;测试参数&quot;,
        &quot;cat_id&quot;: &quot;1&quot;,
        &quot;attr_sel&quot;: &quot;many&quot;,
        &quot;attr_write&quot;: &quot;list&quot;,
        &quot;attr_vals&quot;: &quot;a,b,c&quot;
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;创建成功&quot;,
        &quot;status&quot;: 201
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-7-3-删除参数"><a href="#1-7-3-删除参数" class="headerlink" title="1.7.3. 删除参数"></a>1.7.3. 删除参数</h3><ul>
<li>请求路径： categories/:id/attributes/:attrid</li>
<li>请求方法：delete</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>:id</td>
<td>分类 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>:attrid</td>
<td>参数 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: null,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;删除成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-7-4-根据-ID-查询参数"><a href="#1-7-4-根据-ID-查询参数" class="headerlink" title="1.7.4. 根据 ID 查询参数"></a>1.7.4. 根据 ID 查询参数</h3><ul>
<li>请求路径：categories/:id/attributes/:attrId</li>
<li>请求方法：get</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>:id</td>
<td>分类 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>:attrId</td>
<td>属性 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>attr_sel</td>
<td>[only,many]</td>
<td>不能为空</td>
</tr>
<tr>
<td>attr_vals</td>
<td>如果是 many 就需要填写值的选项，以逗号分隔</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;attr_id&quot;: 1,
        &quot;attr_name&quot;: &quot;cpu&quot;,
        &quot;cat_id&quot;: 22,
        &quot;attr_sel&quot;: &quot;only&quot;,
        &quot;attr_write&quot;: &quot;manual&quot;,
        &quot;attr_vals&quot;: &quot;ffff&quot;
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;获取成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-7-5-编辑提交参数"><a href="#1-7-5-编辑提交参数" class="headerlink" title="1.7.5. 编辑提交参数"></a>1.7.5. 编辑提交参数</h3><ul>
<li>请求路径：categories/:id/attributes/:attrId</li>
<li>请求方法：put</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>:id</td>
<td>分类 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>:attrId</td>
<td>属性 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>attr_name</td>
<td>新属性的名字</td>
<td>不能为空，携带在<code>请求体</code>中</td>
</tr>
<tr>
<td>attr_sel</td>
<td>属性的类型[many或only]</td>
<td>不能为空，携带在<code>请求体</code>中</td>
</tr>
<tr>
<td>attr_vals</td>
<td>参数的属性值</td>
<td>可选参数，携带在<code>请求体</code>中</td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;attr_id&quot;: 9,
        &quot;attr_name&quot;: &quot;测试更新&quot;,
        &quot;cat_id&quot;: &quot;43&quot;,
        &quot;attr_sel&quot;: &quot;only&quot;,
        &quot;attr_write&quot;: &quot;manual&quot;,
        &quot;attr_vals&quot;: &quot;abc&quot;
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;更新成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="1-8-商品管理"><a href="#1-8-商品管理" class="headerlink" title="1.8. 商品管理"></a>1.8. 商品管理</h2><h3 id="1-8-1-商品列表数据"><a href="#1-8-1-商品列表数据" class="headerlink" title="1.8.1. 商品列表数据"></a>1.8.1. 商品列表数据</h3><ul>
<li>请求路径：goods</li>
<li>请求方法：get</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>query</td>
<td>查询参数</td>
<td>可以为空</td>
</tr>
<tr>
<td>pagenum</td>
<td>当前页码</td>
<td>不能为空</td>
</tr>
<tr>
<td>pagesize</td>
<td>每页显示条数</td>
<td>不能为空</td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>total</td>
<td>总共商品条数</td>
<td></td>
</tr>
<tr>
<td>pagenum</td>
<td>当前商品页数</td>
<td></td>
</tr>
<tr>
<td>goods_id</td>
<td>商品 ID</td>
<td></td>
</tr>
<tr>
<td>goods_name</td>
<td>商品名称</td>
<td></td>
</tr>
<tr>
<td>goods_price</td>
<td>价格</td>
<td></td>
</tr>
<tr>
<td>goods_number</td>
<td>数量</td>
<td></td>
</tr>
<tr>
<td>goods_weight</td>
<td>重量</td>
<td>不能为空</td>
</tr>
<tr>
<td>goods_state</td>
<td>商品状态</td>
<td>商品状态 0: 未通过 1: 审核中 2: 已审核</td>
</tr>
<tr>
<td>add_time</td>
<td>添加时间</td>
<td></td>
</tr>
<tr>
<td>upd_time</td>
<td>更新时间</td>
<td></td>
</tr>
<tr>
<td>hot_mumber</td>
<td>热销品数量</td>
<td></td>
</tr>
<tr>
<td>is_promote</td>
<td>是否是热销品</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;total&quot;: 50,
        &quot;pagenum&quot;: &quot;1&quot;,
        &quot;goods&quot;: [
            &#123;
                &quot;goods_id&quot;: 144,
                &quot;goods_name&quot;: &quot;asfdsd&quot;,
                &quot;goods_price&quot;: 1,
                &quot;goods_number&quot;: 1,
                &quot;goods_weight&quot;: 1,
                &quot;goods_state&quot;: null,
                &quot;add_time&quot;: 1512954923,
                &quot;upd_time&quot;: 1512954923,
                &quot;hot_mumber&quot;: 0,
                &quot;is_promote&quot;: false
            &#125;
        ]
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;获取成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-8-2-添加商品"><a href="#1-8-2-添加商品" class="headerlink" title="1.8.2. 添加商品"></a>1.8.2. 添加商品</h3><ul>
<li>请求路径：goods</li>
<li>请求方法：post</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>goods_name</td>
<td>商品名称</td>
<td>不能为空</td>
</tr>
<tr>
<td>goods_cat</td>
<td>以为’,’分割的分类列表</td>
<td>不能为空</td>
</tr>
<tr>
<td>goods_price</td>
<td>价格</td>
<td>不能为空</td>
</tr>
<tr>
<td>goods_number</td>
<td>数量</td>
<td>不能为空</td>
</tr>
<tr>
<td>goods_weight</td>
<td>重量</td>
<td>不能为空</td>
</tr>
<tr>
<td>goods_introduce</td>
<td>介绍</td>
<td>可以为空</td>
</tr>
<tr>
<td>pics</td>
<td>上传的图片临时路径（对象）</td>
<td>可以为空</td>
</tr>
<tr>
<td>attrs</td>
<td>商品的参数（数组），包含 <code>动态参数</code> 和 <code>静态属性</code></td>
<td>可以为空</td>
</tr>
</tbody></table>
<ul>
<li>请求数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"goods_name"</span><span class="token operator">:</span><span class="token string">"test_goods_name2"</span><span class="token punctuation">,</span>
  <span class="token property">"goods_cat"</span><span class="token operator">:</span> <span class="token string">"1,2,3"</span><span class="token punctuation">,</span>
  <span class="token property">"goods_price"</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token property">"goods_number"</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token property">"goods_weight"</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">,</span>
  <span class="token property">"goods_introduce"</span><span class="token operator">:</span><span class="token string">"abc"</span><span class="token punctuation">,</span>
  <span class="token property">"pics"</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span><span class="token property">"pic"</span><span class="token operator">:</span><span class="token string">"/tmp_uploads/30f08d52c551ecb447277eae232304b8"</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"attrs"</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"attr_id"</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span>
      <span class="token property">"attr_value"</span><span class="token operator">:</span><span class="token string">"ddd"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"attr_id"</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span>
      <span class="token property">"attr_value"</span><span class="token operator">:</span><span class="token string">"eee"</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>total</td>
<td>总共商品条数</td>
<td></td>
</tr>
<tr>
<td>pagenum</td>
<td>当前商品页数</td>
<td></td>
</tr>
<tr>
<td>goods_id</td>
<td>商品 ID</td>
<td></td>
</tr>
<tr>
<td>goods_cat</td>
<td>以为’,’分割的分类列表</td>
<td></td>
</tr>
<tr>
<td>goods_name</td>
<td>商品名称</td>
<td></td>
</tr>
<tr>
<td>goods_price</td>
<td>价格</td>
<td></td>
</tr>
<tr>
<td>goods_number</td>
<td>数量</td>
<td></td>
</tr>
<tr>
<td>goods_weight</td>
<td>重量</td>
<td>不能为空</td>
</tr>
<tr>
<td>goods_state</td>
<td>商品状态</td>
<td>商品状态 0: 未通过 1: 审核中 2: 已审核</td>
</tr>
<tr>
<td>add_time</td>
<td>添加时间</td>
<td></td>
</tr>
<tr>
<td>upd_time</td>
<td>更新时间</td>
<td></td>
</tr>
<tr>
<td>hot_mumber</td>
<td>热销品数量</td>
<td></td>
</tr>
<tr>
<td>is_promote</td>
<td>是否是热销品</td>
<td></td>
</tr>
<tr>
<td>pics</td>
<td>上传的图片临时路径（对象）</td>
<td>pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图</td>
</tr>
<tr>
<td>attrs</td>
<td>商品的参数（数组）</td>
<td>goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选,</td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"goods_id"</span><span class="token operator">:</span> <span class="token number">145</span><span class="token punctuation">,</span>
        <span class="token property">"goods_name"</span><span class="token operator">:</span> <span class="token string">"test_goods_name2"</span><span class="token punctuation">,</span>
        <span class="token property">"goods_price"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
        <span class="token property">"cat_id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">"goods_number"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
        <span class="token property">"goods_weight"</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>
        <span class="token property">"goods_introduce"</span><span class="token operator">:</span> <span class="token string">"abc"</span><span class="token punctuation">,</span>
        <span class="token property">"goods_big_logo"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
        <span class="token property">"goods_small_logo"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
        <span class="token property">"goods_state"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">"add_time"</span><span class="token operator">:</span> <span class="token number">1512962370</span><span class="token punctuation">,</span>
        <span class="token property">"upd_time"</span><span class="token operator">:</span> <span class="token number">1512962370</span><span class="token punctuation">,</span>
        <span class="token property">"hot_mumber"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">"is_promote"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">"pics"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">&#123;</span>
                <span class="token property">"pics_id"</span><span class="token operator">:</span> <span class="token number">397</span><span class="token punctuation">,</span>
                <span class="token property">"goods_id"</span><span class="token operator">:</span> <span class="token number">145</span><span class="token punctuation">,</span>
                <span class="token property">"pics_big"</span><span class="token operator">:</span> <span class="token string">"uploads/goodspics/big_30f08d52c551ecb447277eae232304b8"</span><span class="token punctuation">,</span>
                <span class="token property">"pics_mid"</span><span class="token operator">:</span> <span class="token string">"uploads/goodspics/mid_30f08d52c551ecb447277eae232304b8"</span><span class="token punctuation">,</span>
                <span class="token property">"pics_sma"</span><span class="token operator">:</span> <span class="token string">"uploads/goodspics/sma_30f08d52c551ecb447277eae232304b8"</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"attrs"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">&#123;</span>
                <span class="token property">"goods_id"</span><span class="token operator">:</span> <span class="token number">145</span><span class="token punctuation">,</span>
                <span class="token property">"attr_id"</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
                <span class="token property">"attr_value"</span><span class="token operator">:</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span>
                <span class="token property">"add_price"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
                <span class="token property">"attr_name"</span><span class="token operator">:</span> <span class="token string">"fffffff"</span><span class="token punctuation">,</span>
                <span class="token property">"attr_sel"</span><span class="token operator">:</span> <span class="token string">"many"</span><span class="token punctuation">,</span>
                <span class="token property">"attr_write"</span><span class="token operator">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>
                <span class="token property">"attr_vals"</span><span class="token operator">:</span> <span class="token string">""</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#123;</span>
                <span class="token property">"goods_id"</span><span class="token operator">:</span> <span class="token number">145</span><span class="token punctuation">,</span>
                <span class="token property">"attr_id"</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
                <span class="token property">"attr_value"</span><span class="token operator">:</span> <span class="token string">"eee"</span><span class="token punctuation">,</span>
                <span class="token property">"add_price"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
                <span class="token property">"attr_name"</span><span class="token operator">:</span> <span class="token string">"fffffff"</span><span class="token punctuation">,</span>
                <span class="token property">"attr_sel"</span><span class="token operator">:</span> <span class="token string">"many"</span><span class="token punctuation">,</span>
                <span class="token property">"attr_write"</span><span class="token operator">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>
                <span class="token property">"attr_vals"</span><span class="token operator">:</span> <span class="token string">""</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"创建商品成功"</span><span class="token punctuation">,</span>
        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">201</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-8-3-根据-ID-查询商品"><a href="#1-8-3-根据-ID-查询商品" class="headerlink" title="1.8.3. 根据 ID 查询商品"></a>1.8.3. 根据 ID 查询商品</h3><ul>
<li>请求路径：goods/:id</li>
<li>请求方法：get</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>商品 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
</tbody></table>
<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>total</td>
<td>总共商品条数</td>
<td></td>
</tr>
<tr>
<td>pagenum</td>
<td>当前商品页数</td>
<td></td>
</tr>
<tr>
<td>goods_id</td>
<td>商品 ID</td>
<td></td>
</tr>
<tr>
<td>goods_name</td>
<td>商品名称</td>
<td></td>
</tr>
<tr>
<td>goods_price</td>
<td>价格</td>
<td></td>
</tr>
<tr>
<td>goods_number</td>
<td>数量</td>
<td></td>
</tr>
<tr>
<td>goods_weight</td>
<td>重量</td>
<td>不能为空</td>
</tr>
<tr>
<td>goods_state</td>
<td>商品状态</td>
<td>商品状态 0: 未通过 1: 审核中 2: 已审核</td>
</tr>
<tr>
<td>add_time</td>
<td>添加时间</td>
<td></td>
</tr>
<tr>
<td>upd_time</td>
<td>更新时间</td>
<td></td>
</tr>
<tr>
<td>hot_mumber</td>
<td>热销品数量</td>
<td></td>
</tr>
<tr>
<td>is_promote</td>
<td>是否是热销品</td>
<td></td>
</tr>
<tr>
<td>pics</td>
<td>上传的图片临时路径（对象）</td>
<td>pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图</td>
</tr>
<tr>
<td>attrs</td>
<td>商品的参数（数组）</td>
<td>goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选,</td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;goods_id&quot;: 145,
        &quot;goods_name&quot;: &quot;test_goods_name2&quot;,
        &quot;goods_price&quot;: 20,
        &quot;goods_number&quot;: 30,
        &quot;goods_weight&quot;: 40,
        &quot;goods_introduce&quot;: &quot;abc&quot;,
        &quot;goods_big_logo&quot;: &quot;&quot;,
        &quot;goods_small_logo&quot;: &quot;&quot;,
        &quot;goods_state&quot;: 1,
        &quot;add_time&quot;: 1512962370,
        &quot;upd_time&quot;: 1512962370,
        &quot;hot_mumber&quot;: 0,
        &quot;is_promote&quot;: false,
        &quot;pics&quot;: [
            &#123;
                &quot;pics_id&quot;: 397,
                &quot;goods_id&quot;: 145,
                &quot;pics_big&quot;: &quot;uploads&#x2F;goodspics&#x2F;big_30f08d52c551ecb447277eae232304b8&quot;,
                &quot;pics_mid&quot;: &quot;uploads&#x2F;goodspics&#x2F;mid_30f08d52c551ecb447277eae232304b8&quot;,
                &quot;pics_sma&quot;: &quot;uploads&#x2F;goodspics&#x2F;sma_30f08d52c551ecb447277eae232304b8&quot;
            &#125;
        ],
        &quot;attrs&quot;: [
            &#123;
                &quot;goods_id&quot;: 145,
                &quot;attr_id&quot;: 15,
                &quot;attr_value&quot;: &quot;ddd&quot;,
                &quot;add_price&quot;: null,
                &quot;attr_name&quot;: &quot;fffffff&quot;,
                &quot;attr_sel&quot;: &quot;many&quot;,
                &quot;attr_write&quot;: &quot;list&quot;,
                &quot;attr_vals&quot;: &quot;&quot;
            &#125;,
            &#123;
                &quot;goods_id&quot;: 145,
                &quot;attr_id&quot;: 15,
                &quot;attr_value&quot;: &quot;eee&quot;,
                &quot;add_price&quot;: null,
                &quot;attr_name&quot;: &quot;fffffff&quot;,
                &quot;attr_sel&quot;: &quot;many&quot;,
                &quot;attr_write&quot;: &quot;list&quot;,
                &quot;attr_vals&quot;: &quot;&quot;
            &#125;
        ]
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;创建商品成功&quot;,
        &quot;status&quot;: 201
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-8-4-编辑提交商品"><a href="#1-8-4-编辑提交商品" class="headerlink" title="1.8.4. 编辑提交商品"></a>1.8.4. 编辑提交商品</h3><ul>
<li>请求路径：goods/:id</li>
<li>请求方法：put</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>商品 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>goods_name</td>
<td>商品名称</td>
<td>不能为空</td>
</tr>
<tr>
<td>goods_price</td>
<td>价格</td>
<td>不能为空</td>
</tr>
<tr>
<td>goods_number</td>
<td>数量</td>
<td>不能为空</td>
</tr>
<tr>
<td>goods_weight</td>
<td>重量</td>
<td>不能为空</td>
</tr>
<tr>
<td>goods_introduce</td>
<td>介绍</td>
<td>可以为空</td>
</tr>
<tr>
<td>pics</td>
<td>上传的图片临时路径（对象）</td>
<td>可以为空</td>
</tr>
<tr>
<td>attrs</td>
<td>商品的参数（数组）</td>
<td>可以为空</td>
</tr>
</tbody></table>
<ul>
<li>请求数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
  &quot;goods_name&quot;:&quot;test_goods_name2&quot;,
  &quot;goods_price&quot;:20,
  &quot;goods_number&quot;:30,
  &quot;goods_weight&quot;:40,
  &quot;goods_introduce&quot;:&quot;abc&quot;,
  &quot;pics&quot;:[
    &#123;&quot;pic&quot;:&quot;&#x2F;tmp_uploads&#x2F;30f08d52c551ecb447277eae232304b8&quot;&#125;
    ],
  &quot;attrs&quot;:[
    &#123;
      &quot;attr_id&quot;:15,
      &quot;attr_value&quot;:&quot;ddd&quot;
    &#125;,
    &#123;
      &quot;attr_id&quot;:15,
      &quot;attr_value&quot;:&quot;eee&quot;
    &#125;
    ]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>响应参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>total</td>
<td>总共商品条数</td>
<td></td>
</tr>
<tr>
<td>pagenum</td>
<td>当前商品页数</td>
<td></td>
</tr>
<tr>
<td>goods_id</td>
<td>商品 ID</td>
<td></td>
</tr>
<tr>
<td>goods_name</td>
<td>商品名称</td>
<td></td>
</tr>
<tr>
<td>goods_price</td>
<td>价格</td>
<td></td>
</tr>
<tr>
<td>goods_number</td>
<td>数量</td>
<td></td>
</tr>
<tr>
<td>goods_weight</td>
<td>重量</td>
<td>不能为空</td>
</tr>
<tr>
<td>goods_state</td>
<td>商品状态</td>
<td>商品状态 0: 未通过 1: 审核中 2: 已审核</td>
</tr>
<tr>
<td>add_time</td>
<td>添加时间</td>
<td></td>
</tr>
<tr>
<td>upd_time</td>
<td>更新时间</td>
<td></td>
</tr>
<tr>
<td>hot_mumber</td>
<td>热销品数量</td>
<td></td>
</tr>
<tr>
<td>is_promote</td>
<td>是否是热销品</td>
<td></td>
</tr>
<tr>
<td>pics</td>
<td>上传的图片临时路径（对象）</td>
<td>pics_id:图片 ID,goods_id:商品 ID,pics_big:大图,pics_mid:中图,pics_sma:小图</td>
</tr>
<tr>
<td>attrs</td>
<td>商品的参数（数组）</td>
<td>goods_id:商品 ID,attr_value:当前商品的参数值,add_price:浮动价格,attr_vals:预定义的参数值,attr_sel:手动输入，还是单选,</td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;goods_id&quot;: 145,
        &quot;goods_name&quot;: &quot;test_goods_name2&quot;,
        &quot;goods_price&quot;: 20,
        &quot;goods_number&quot;: 30,
        &quot;goods_weight&quot;: 40,
        &quot;goods_introduce&quot;: &quot;abc&quot;,
        &quot;goods_big_logo&quot;: &quot;&quot;,
        &quot;goods_small_logo&quot;: &quot;&quot;,
        &quot;goods_state&quot;: 1,
        &quot;add_time&quot;: 1512962370,
        &quot;upd_time&quot;: 1512962370,
        &quot;hot_mumber&quot;: 0,
        &quot;is_promote&quot;: false,
        &quot;pics&quot;: [
            &#123;
                &quot;pics_id&quot;: 397,
                &quot;goods_id&quot;: 145,
                &quot;pics_big&quot;: &quot;uploads&#x2F;goodspics&#x2F;big_30f08d52c551ecb447277eae232304b8&quot;,
                &quot;pics_mid&quot;: &quot;uploads&#x2F;goodspics&#x2F;mid_30f08d52c551ecb447277eae232304b8&quot;,
                &quot;pics_sma&quot;: &quot;uploads&#x2F;goodspics&#x2F;sma_30f08d52c551ecb447277eae232304b8&quot;
            &#125;
        ],
        &quot;attrs&quot;: [
            &#123;
                &quot;goods_id&quot;: 145,
                &quot;attr_id&quot;: 15,
                &quot;attr_value&quot;: &quot;ddd&quot;,
                &quot;add_price&quot;: null,
                &quot;attr_name&quot;: &quot;fffffff&quot;,
                &quot;attr_sel&quot;: &quot;many&quot;,
                &quot;attr_write&quot;: &quot;list&quot;,
                &quot;attr_vals&quot;: &quot;&quot;
            &#125;,
            &#123;
                &quot;goods_id&quot;: 145,
                &quot;attr_id&quot;: 15,
                &quot;attr_value&quot;: &quot;eee&quot;,
                &quot;add_price&quot;: null,
                &quot;attr_name&quot;: &quot;fffffff&quot;,
                &quot;attr_sel&quot;: &quot;many&quot;,
                &quot;attr_write&quot;: &quot;list&quot;,
                &quot;attr_vals&quot;: &quot;&quot;
            &#125;
        ]
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;创建商品成功&quot;,
        &quot;status&quot;: 201
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-8-5-删除商品"><a href="#1-8-5-删除商品" class="headerlink" title="1.8.5. 删除商品"></a>1.8.5. 删除商品</h3><ul>
<li>请求路径：goods/:id</li>
<li>请求方法：delete</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>商品 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: null,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;删除成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>###同步商品图片</p>
<ul>
<li>请求路径：goods/:id/pics</li>
<li>请求方法：put</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>商品 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>pics</td>
<td>商品图片集合</td>
<td>如果有 pics_id 字段会保留该图片，如果没有 pics_id 但是有 pic 字段就会新生成图片数据</td>
</tr>
</tbody></table>
<ul>
<li>请求数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">;[
  &#123; pic: &#39;tmp_uploads&#x2F;db28f6316835836e97653b5c75e418be.png&#39; &#125;,
  &#123;
    pics_id: 397,
    goods_id: 145,
    pics_big: &#39;uploads&#x2F;goodspics&#x2F;big_30f08d52c551ecb447277eae232304b8&#39;,
    pics_mid: &#39;uploads&#x2F;goodspics&#x2F;mid_30f08d52c551ecb447277eae232304b8&#39;,
    pics_sma: &#39;uploads&#x2F;goodspics&#x2F;sma_30f08d52c551ecb447277eae232304b8&#39;
  &#125;
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;goods_id&quot;: 96,
        &quot;goods_name&quot;: &quot;iphoneXX&quot;,
        &quot;goods_price&quot;: 2,
        &quot;goods_number&quot;: 22,
        &quot;goods_weight&quot;: 22,
        &quot;goods_introduce&quot;: null,
        &quot;goods_big_logo&quot;: &quot;.&#x2F;uploads&#x2F;goods&#x2F;20171113&#x2F;483a3b8e99e534ec3e4312dbbaee7c9d.jpg&quot;,
        &quot;goods_small_logo&quot;: &quot;.&#x2F;uploads&#x2F;goods&#x2F;20171113&#x2F;small_483a3b8e99e534ec3e4312dbbaee7c9d.jpg&quot;,
        &quot;goods_state&quot;: 0,
        &quot;is_del&quot;: &quot;1&quot;,
        &quot;add_time&quot;: 1510045904,
        &quot;upd_time&quot;: 1512635159,
        &quot;delete_time&quot;: 1512635159,
        &quot;hot_mumber&quot;: 0,
        &quot;is_promote&quot;: false,
        &quot;pics&quot;: [
            &#123;
                &quot;pics_id&quot;: 383,
                &quot;goods_id&quot;: 96,
                &quot;pics_big&quot;: &quot;uploads&#x2F;goodspics&#x2F;big_6f5750132abd3f5b2b93dd722fcde653.jpg&quot;,
                &quot;pics_mid&quot;: &quot;uploads&#x2F;goodspics&#x2F;mid_6f5750132abd3f5b2b93dd722fcde653.jpg&quot;,
                &quot;pics_sma&quot;: &quot;uploads&#x2F;goodspics&#x2F;sma_6f5750132abd3f5b2b93dd722fcde653.jpg&quot;
            &#125;
        ],
        &quot;attrs&quot;: [
            &#123;
                &quot;goods_id&quot;: 96,
                &quot;attr_id&quot;: 15,
                &quot;attr_value&quot;: &quot;eee&quot;,
                &quot;add_price&quot;: null,
                &quot;attr_name&quot;: &quot;fffffff&quot;,
                &quot;attr_sel&quot;: &quot;many&quot;,
                &quot;attr_write&quot;: &quot;list&quot;,
                &quot;attr_vals&quot;: &quot;&quot;
            &#125;,
            &#123;
                &quot;goods_id&quot;: 96,
                &quot;attr_id&quot;: 15,
                &quot;attr_value&quot;: &quot;ddd&quot;,
                &quot;add_price&quot;: null,
                &quot;attr_name&quot;: &quot;fffffff&quot;,
                &quot;attr_sel&quot;: &quot;many&quot;,
                &quot;attr_write&quot;: &quot;list&quot;,
                &quot;attr_vals&quot;: &quot;&quot;
            &#125;
        ]
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;更新成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>###同步商品属性</p>
<ul>
<li>请求路径：goods/:id/attributes</li>
<li>请求方法：put</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>商品 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
</tbody></table>
<ul>
<li>请求数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">;[
  &#123;
    attr_id: 15,
    attr_value: &#39;ddd&#39;
  &#125;,
  &#123;
    attr_id: 15,
    attr_value: &#39;eee&#39;
  &#125;
]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;goods_id&quot;: 96,
        &quot;goods_name&quot;: &quot;iphoneXX&quot;,
        &quot;goods_price&quot;: 2,
        &quot;goods_number&quot;: 22,
        &quot;goods_weight&quot;: 22,
        &quot;goods_introduce&quot;: null,
        &quot;goods_big_logo&quot;: &quot;.&#x2F;uploads&#x2F;goods&#x2F;20171113&#x2F;483a3b8e99e534ec3e4312dbbaee7c9d.jpg&quot;,
        &quot;goods_small_logo&quot;: &quot;.&#x2F;uploads&#x2F;goods&#x2F;20171113&#x2F;small_483a3b8e99e534ec3e4312dbbaee7c9d.jpg&quot;,
        &quot;goods_state&quot;: 0,
        &quot;is_del&quot;: &quot;1&quot;,
        &quot;add_time&quot;: 1510045904,
        &quot;upd_time&quot;: 1512635159,
        &quot;delete_time&quot;: 1512635159,
        &quot;hot_mumber&quot;: 0,
        &quot;is_promote&quot;: false,
        &quot;pics&quot;: [
            &#123;
                &quot;pics_id&quot;: 383,
                &quot;goods_id&quot;: 96,
                &quot;pics_big&quot;: &quot;uploads&#x2F;goodspics&#x2F;big_6f5750132abd3f5b2b93dd722fcde653.jpg&quot;,
                &quot;pics_mid&quot;: &quot;uploads&#x2F;goodspics&#x2F;mid_6f5750132abd3f5b2b93dd722fcde653.jpg&quot;,
                &quot;pics_sma&quot;: &quot;uploads&#x2F;goodspics&#x2F;sma_6f5750132abd3f5b2b93dd722fcde653.jpg&quot;
            &#125;
        ],
        &quot;attrs&quot;: [
            &#123;
                &quot;goods_id&quot;: 96,
                &quot;attr_id&quot;: 15,
                &quot;attr_value&quot;: &quot;eee&quot;,
                &quot;add_price&quot;: null,
                &quot;attr_name&quot;: &quot;fffffff&quot;,
                &quot;attr_sel&quot;: &quot;many&quot;,
                &quot;attr_write&quot;: &quot;list&quot;,
                &quot;attr_vals&quot;: &quot;&quot;
            &#125;,
            &#123;
                &quot;goods_id&quot;: 96,
                &quot;attr_id&quot;: 15,
                &quot;attr_value&quot;: &quot;ddd&quot;,
                &quot;add_price&quot;: null,
                &quot;attr_name&quot;: &quot;fffffff&quot;,
                &quot;attr_sel&quot;: &quot;many&quot;,
                &quot;attr_write&quot;: &quot;list&quot;,
                &quot;attr_vals&quot;: &quot;&quot;
            &#125;
        ]
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;更新成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>###商品图片处理必须安装 GraphicsMagick</p>
<ul>
<li>linux</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">apt-get install GraphicsMagick<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>Mac OS X</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">brew install GraphicsMagick<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>Windows <a href="https://sourceforge.net/projects/graphicsmagick/files/graphicsmagick-binaries/1.3.27/GraphicsMagick-1.3.27-Q8-win64-dll.exe/download">点击下载</a></li>
</ul>
<h2 id="1-9-图片上传"><a href="#1-9-图片上传" class="headerlink" title="1.9. 图片上传"></a>1.9. 图片上传</h2><ul>
<li>请求路径：upload</li>
<li>请求方法：post</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>file</td>
<td>上传文件</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;tmp_path&quot;: &quot;tmp_uploads&#x2F;ccfc5179a914e94506bcbb7377e8985f.png&quot;,
        &quot;url&quot;: &quot;http:&#x2F;&#x2F;127.0.0.1:8888tmp_uploads&#x2F;ccfc5179a914e94506bcbb7377e8985f.png&quot;
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;上传成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="1-10-订单管理"><a href="#1-10-订单管理" class="headerlink" title="1.10. 订单管理"></a>1.10. 订单管理</h2><h3 id="1-10-1-订单数据列表"><a href="#1-10-1-订单数据列表" class="headerlink" title="1.10.1. 订单数据列表"></a>1.10.1. 订单数据列表</h3><ul>
<li>请求路径：orders</li>
<li>请求方法：get</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>query</td>
<td>查询参数</td>
<td>可以为空</td>
</tr>
<tr>
<td>pagenum</td>
<td>当前页码</td>
<td>不能为空</td>
</tr>
<tr>
<td>pagesize</td>
<td>每页显示条数</td>
<td>不能为空</td>
</tr>
<tr>
<td>user_id</td>
<td>用户 ID</td>
<td>可以为空</td>
</tr>
<tr>
<td>pay_status</td>
<td>支付状态</td>
<td>可以为空</td>
</tr>
<tr>
<td>is_send</td>
<td>是否发货</td>
<td>可以为空</td>
</tr>
<tr>
<td>order_fapiao_title</td>
<td>[‘个人’,’公司’]</td>
<td>可以为空</td>
</tr>
<tr>
<td>order_fapiao_company</td>
<td>公司名称</td>
<td>可以为空</td>
</tr>
<tr>
<td>order_fapiao_content</td>
<td>发票内容</td>
<td>可以为空</td>
</tr>
<tr>
<td>consignee_addr</td>
<td>发货地址</td>
<td>可以为空</td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;total&quot;: 1,
        &quot;pagenum&quot;: &quot;1&quot;,
        &quot;goods&quot;: [
            &#123;
                &quot;order_id&quot;: 47,
                &quot;user_id&quot;: 133,
                &quot;order_number&quot;: &quot;itcast-59e7502d7993d&quot;,
                &quot;order_price&quot;: 322,
                &quot;order_pay&quot;: &quot;1&quot;,
                &quot;is_send&quot;: &quot;是&quot;,
                &quot;trade_no&quot;: &quot;&quot;,
                &quot;order_fapiao_title&quot;: &quot;个人&quot;,
                &quot;order_fapiao_company&quot;: &quot;&quot;,
                &quot;order_fapiao_content&quot;: &quot;办公用品&quot;,
                &quot;consignee_addr&quot;: &quot;a:7:&#123;s:6:\&quot;cgn_id\&quot;;i:1;s:7:\&quot;user_id\&quot;;i:133;s:8:\&quot;cgn_name\&quot;;s:9:\&quot;王二柱\&quot;;s:11:\&quot;cgn_address\&quot;;s:51:\&quot;北京市海淀区苏州街长远天地大厦305室\&quot;;s:7:\&quot;cgn_tel\&quot;;s:11:\&quot;13566771298\&quot;;s:8:\&quot;cgn_code\&quot;;s:6:\&quot;306810\&quot;;s:11:\&quot;delete_time\&quot;;N;&#125;&quot;,
                &quot;pay_status&quot;: &quot;1&quot;,
                &quot;create_time&quot;: 1508331565,
                &quot;update_time&quot;: 1508331565
            &#125;
        ]
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;获取成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-10-2-修改订单状态"><a href="#1-10-2-修改订单状态" class="headerlink" title="1.10.2. 修改订单状态"></a>1.10.2. 修改订单状态</h3><ul>
<li>请求路径：orders/:id</li>
<li>请求方法：put</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>订单 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
<tr>
<td>is_send</td>
<td>订单是否发货</td>
<td>1:已经发货，0:未发货</td>
</tr>
<tr>
<td>order_pay</td>
<td>订单支付</td>
<td>支付方式 0 未支付 1 支付宝 2 微信 3 银行卡</td>
</tr>
<tr>
<td>order_price</td>
<td>订单价格</td>
<td></td>
</tr>
<tr>
<td>order_number</td>
<td>订单数量</td>
<td></td>
</tr>
<tr>
<td>pay_status</td>
<td>支付状态</td>
<td>订单状态： 0 未付款、1 已付款</td>
</tr>
</tbody></table>
<ul>
<li>请求数据说明<ul>
<li>所有请求数据都是增量更新，如果参数不填写，就不会更新该字段</li>
</ul>
</li>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;order_id&quot;: 67,
        &quot;user_id&quot;: 1,
        &quot;order_number&quot;: &quot;itcast-g7kmck71vjaujfgoi&quot;,
        &quot;order_price&quot;: 20,
        &quot;order_pay&quot;: &quot;0&quot;,
        &quot;is_send&quot;: &quot;否&quot;,
        &quot;trade_no&quot;: &quot;&quot;,
        &quot;order_fapiao_title&quot;: &quot;个人&quot;,
        &quot;order_fapiao_company&quot;: &quot;&quot;,
        &quot;order_fapiao_content&quot;: &quot;&quot;,
        &quot;consignee_addr&quot;: &quot;&quot;,
        &quot;pay_status&quot;: &quot;0&quot;,
        &quot;create_time&quot;: 1512533560,
        &quot;update_time&quot;: 1512533560,
        &quot;goods&quot;: [
            &#123;
                &quot;id&quot;: 82,
                &quot;order_id&quot;: 67,
                &quot;goods_id&quot;: 96,
                &quot;goods_price&quot;: 333,
                &quot;goods_number&quot;: 2,
                &quot;goods_total_price&quot;: 999
            &#125;,
            &#123;
                &quot;id&quot;: 83,
                &quot;order_id&quot;: 67,
                &quot;goods_id&quot;: 95,
                &quot;goods_price&quot;: 666,
                &quot;goods_number&quot;: 5,
                &quot;goods_total_price&quot;: 999
            &#125;
        ]
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;获取成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-10-3-查看订单详情"><a href="#1-10-3-查看订单详情" class="headerlink" title="1.10.3. 查看订单详情"></a>1.10.3. 查看订单详情</h3><ul>
<li>请求路径：orders/:id</li>
<li>请求方法：get</li>
<li>请求参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>参数说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>订单 ID</td>
<td>不能为空<code>携带在url中</code></td>
</tr>
</tbody></table>
<ul>
<li>响应数据</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;data&quot;: &#123;
        &quot;order_id&quot;: 67,
        &quot;user_id&quot;: 1,
        &quot;order_number&quot;: &quot;itcast-g7kmck71vjaujfgoi&quot;,
        &quot;order_price&quot;: 20,
        &quot;order_pay&quot;: &quot;0&quot;,
        &quot;is_send&quot;: &quot;否&quot;,
        &quot;trade_no&quot;: &quot;&quot;,
        &quot;order_fapiao_title&quot;: &quot;个人&quot;,
        &quot;order_fapiao_company&quot;: &quot;&quot;,
        &quot;order_fapiao_content&quot;: &quot;&quot;,
        &quot;consignee_addr&quot;: &quot;&quot;,
        &quot;pay_status&quot;: &quot;0&quot;,
        &quot;create_time&quot;: 1512533560,
        &quot;update_time&quot;: 1512533560,
        &quot;goods&quot;: [
            &#123;
                &quot;id&quot;: 82,
                &quot;order_id&quot;: 67,
                &quot;goods_id&quot;: 96,
                &quot;goods_price&quot;: 333,
                &quot;goods_number&quot;: 2,
                &quot;goods_total_price&quot;: 999
            &#125;,
            &#123;
                &quot;id&quot;: 83,
                &quot;order_id&quot;: 67,
                &quot;goods_id&quot;: 95,
                &quot;goods_price&quot;: 666,
                &quot;goods_number&quot;: 5,
                &quot;goods_total_price&quot;: 999
            &#125;
        ]
    &#125;,
    &quot;meta&quot;: &#123;
        &quot;msg&quot;: &quot;获取成功&quot;,
        &quot;status&quot;: 200
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="1-10-4-修改地址"><a href="#1-10-4-修改地址" class="headerlink" title="1.10.4. 修改地址"></a>1.10.4. 修改地址</h3><ol>
<li><a href="https://github.com/iceyangcc/provinces-china">省市区/县联动效果 - 结合ElementUI的 el-cascader 组件</a></li>
</ol>
<h3 id="1-10-5-查看物流信息"><a href="#1-10-5-查看物流信息" class="headerlink" title="1.10.5. 查看物流信息"></a>1.10.5. 查看物流信息</h3><ul>
<li><p>请求路径：/kuaidi/:id</p>
</li>
<li><p>请求方法：get</p>
</li>
<li><p>供测试的物流单号：1106975712662</p>
</li>
<li><p>响应数据：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"time"</span><span class="token operator">:</span> <span class="token string">"2018-05-10 09:39:00"</span><span class="token punctuation">,</span>
      <span class="token property">"ftime"</span><span class="token operator">:</span> <span class="token string">"2018-05-10 09:39:00"</span><span class="token punctuation">,</span>
      <span class="token property">"context"</span><span class="token operator">:</span> <span class="token string">"已签收,感谢使用顺丰,期待再次为您服务"</span><span class="token punctuation">,</span>
      <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"time"</span><span class="token operator">:</span> <span class="token string">"2018-05-10 08:23:00"</span><span class="token punctuation">,</span>
      <span class="token property">"ftime"</span><span class="token operator">:</span> <span class="token string">"2018-05-10 08:23:00"</span><span class="token punctuation">,</span>
      <span class="token property">"context"</span><span class="token operator">:</span> <span class="token string">"[北京市]北京海淀育新小区营业点派件员 顺丰速运 95338正在为您派件"</span><span class="token punctuation">,</span>
      <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"time"</span><span class="token operator">:</span> <span class="token string">"2018-05-10 07:32:00"</span><span class="token punctuation">,</span>
      <span class="token property">"ftime"</span><span class="token operator">:</span> <span class="token string">"2018-05-10 07:32:00"</span><span class="token punctuation">,</span>
      <span class="token property">"context"</span><span class="token operator">:</span> <span class="token string">"快件到达 [北京海淀育新小区营业点]"</span><span class="token punctuation">,</span>
      <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"time"</span><span class="token operator">:</span> <span class="token string">"2018-05-10 02:03:00"</span><span class="token punctuation">,</span>
      <span class="token property">"ftime"</span><span class="token operator">:</span> <span class="token string">"2018-05-10 02:03:00"</span><span class="token punctuation">,</span>
      <span class="token property">"context"</span><span class="token operator">:</span> <span class="token string">"快件在[北京顺义集散中心]已装车,准备发往 [北京海淀育新小区营业点]"</span><span class="token punctuation">,</span>
      <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"time"</span><span class="token operator">:</span> <span class="token string">"2018-05-09 23:05:00"</span><span class="token punctuation">,</span>
      <span class="token property">"ftime"</span><span class="token operator">:</span> <span class="token string">"2018-05-09 23:05:00"</span><span class="token punctuation">,</span>
      <span class="token property">"context"</span><span class="token operator">:</span> <span class="token string">"快件到达 [北京顺义集散中心]"</span><span class="token punctuation">,</span>
      <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"time"</span><span class="token operator">:</span> <span class="token string">"2018-05-09 21:21:00"</span><span class="token punctuation">,</span>
      <span class="token property">"ftime"</span><span class="token operator">:</span> <span class="token string">"2018-05-09 21:21:00"</span><span class="token punctuation">,</span>
      <span class="token property">"context"</span><span class="token operator">:</span> <span class="token string">"快件在[北京宝胜营业点]已装车,准备发往 [北京顺义集散中心]"</span><span class="token punctuation">,</span>
      <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"time"</span><span class="token operator">:</span> <span class="token string">"2018-05-09 13:07:00"</span><span class="token punctuation">,</span>
      <span class="token property">"ftime"</span><span class="token operator">:</span> <span class="token string">"2018-05-09 13:07:00"</span><span class="token punctuation">,</span>
      <span class="token property">"context"</span><span class="token operator">:</span> <span class="token string">"顺丰速运 已收取快件"</span><span class="token punctuation">,</span>
      <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"time"</span><span class="token operator">:</span> <span class="token string">"2018-05-09 12:25:03"</span><span class="token punctuation">,</span>
      <span class="token property">"ftime"</span><span class="token operator">:</span> <span class="token string">"2018-05-09 12:25:03"</span><span class="token punctuation">,</span>
      <span class="token property">"context"</span><span class="token operator">:</span> <span class="token string">"卖家发货"</span><span class="token punctuation">,</span>
      <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"time"</span><span class="token operator">:</span> <span class="token string">"2018-05-09 12:22:24"</span><span class="token punctuation">,</span>
      <span class="token property">"ftime"</span><span class="token operator">:</span> <span class="token string">"2018-05-09 12:22:24"</span><span class="token punctuation">,</span>
      <span class="token property">"context"</span><span class="token operator">:</span> <span class="token string">"您的订单将由HLA（北京海淀区清河中街店）门店安排发货。"</span><span class="token punctuation">,</span>
      <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"time"</span><span class="token operator">:</span> <span class="token string">"2018-05-08 21:36:04"</span><span class="token punctuation">,</span>
      <span class="token property">"ftime"</span><span class="token operator">:</span> <span class="token string">"2018-05-08 21:36:04"</span><span class="token punctuation">,</span>
      <span class="token property">"context"</span><span class="token operator">:</span> <span class="token string">"商品已经下单"</span><span class="token punctuation">,</span>
      <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"获取物流信息成功！"</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="1-11-数据统计"><a href="#1-11-数据统计" class="headerlink" title="1.11. 数据统计"></a>1.11. 数据统计</h2><h3 id="1-11-1-基于时间统计的折线图"><a href="#1-11-1-基于时间统计的折线图" class="headerlink" title="1.11.1.  基于时间统计的折线图"></a>1.11.1.  基于时间统计的折线图</h3><ul>
<li><p>请求路径：reports/type/1</p>
</li>
<li><p>请求方法：get</p>
</li>
<li><p>响应数据</p>
</li>
<li><p>需要合并的选项</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          text<span class="token operator">:</span> <span class="token string">'用户来源'</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        tooltip<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          trigger<span class="token operator">:</span> <span class="token string">'axis'</span><span class="token punctuation">,</span>
          axisPointer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            type<span class="token operator">:</span> <span class="token string">'cross'</span><span class="token punctuation">,</span>
            label<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
              backgroundColor<span class="token operator">:</span> <span class="token string">'#E9EEF3'</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        grid<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          left<span class="token operator">:</span> <span class="token string">'3%'</span><span class="token punctuation">,</span>
          right<span class="token operator">:</span> <span class="token string">'4%'</span><span class="token punctuation">,</span>
          bottom<span class="token operator">:</span> <span class="token string">'3%'</span><span class="token punctuation">,</span>
          containLabel<span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        xAxis<span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">&#123;</span>
            boundaryGap<span class="token operator">:</span> <span class="token boolean">false</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        yAxis<span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">&#123;</span>
            type<span class="token operator">:</span> <span class="token string">'value'</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Vue学习-理解vue之element-ui中的 slot-scope</title>
    <url>/2018/05/14/vue_scop/</url>
    <content><![CDATA[<p>理解vue之element-ui中的 slot-scope</p>
<span id="more"></span>
<h2 id="Table-column-Scoped-Slot"><a href="#Table-column-Scoped-Slot" class="headerlink" title="Table-column Scoped Slot"></a>Table-column Scoped Slot</h2><p>name        说明<br>—    自定义列的内容，参数为 { row, column, $index }<br>header    自定义表头的内容. 参数为 { column, $index }</p>
<p>在实际的使用过程中，这种用法当然不仅仅局限于此，其他的地方也会用到。到底这里有什么特别之处呢？<br>我们看看普通的table用法：</p>
<pre><code><pre class="line-numbers language-none"><code class="language-none">&lt;&#x2F;el-table-column&gt;
             &lt;el-table-column prop&#x3D;&quot;mg_state&quot; label&#x3D;&quot;状态&quot;&gt;
                 &lt;template slot-scope&#x3D;&quot;scope&quot;&gt;
                    &#123;&#123;scope.row.mg_state&#125;&#125;
             　　&lt;&#x2F;template&gt;
         &lt;&#x2F;el-table-column&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</code></pre>
<p>template（模版） 在这里属于一个固定用法： <template slot-scope="scope"></p>
<p>我们主要说一下这个scope是个什么东西，按照element上的提示：</p>
<p>通过 Scoped slot 可以获取到 row, column, $index 和 store（table 内部的状态管理）的数据</p>
<p>还有重要的一点，scope又并非是整个table，我们只是能通过scope.row获得当前的行数据。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Vue学习</title>
    <url>/2018/05/14/vue_study/</url>
    <content><![CDATA[<p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
<span id="more"></span>
<h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><p> a.文本<br> b.纯html<br>  v-html 防止xss攻击<br> c.表达式</p>
<h2 id="指令-带有v-前缀"><a href="#指令-带有v-前缀" class="headerlink" title="指令:带有v-前缀"></a>指令:带有v-前缀</h2><p> v-bind<br> v-if<br> v-on:click<br> v-model:<br>   -双向数据绑定</p>
<h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><p> v-bind:src =&gt; :src<br> v-on:click =&gt; @click</p>
<h1 id="计算属性-复杂逻辑：computed"><a href="#计算属性-复杂逻辑：computed" class="headerlink" title="计算属性-复杂逻辑：computed"></a>计算属性-复杂逻辑：computed</h1><p> -计算属性时基于他们的依赖进行缓存的。<br> -计算属性只有在它的相关依赖才会重新请求</p>
<h1 id="class与style绑定"><a href="#class与style绑定" class="headerlink" title="class与style绑定"></a>class与style绑定</h1><h2 id="绑定html-class"><a href="#绑定html-class" class="headerlink" title="绑定html class"></a>绑定html class</h2><p> -对象语法<br>    <pre class="line-numbers language-none"><code class="language-none">&lt;p class&#x3D;&quot;default&quot; :class&#x3D;&quot;&#123;active:isShow,show:isShow2&#125;&quot;&gt;class样式&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br> -数组语法<br>    <pre class="line-numbers language-none"><code class="language-none">&lt;p class&#x3D;&quot;default&quot; :class&#x3D;&quot;[who,&#39;show&#39;]&quot;&gt;class样式&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<h2 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h2><p> -对象语法<br>    <pre class="line-numbers language-none"><code class="language-none">&lt;p class&#x3D;&quot;default&quot; :style&#x3D;&quot;&#123;background:color&#125;&quot;&gt;class样式&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br> -数组语法</p>
<h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><p> v-if<br> v-else<br> template v-if:template不会渲染到dom节点<br> v-show：v-show不支持template和v-else</p>
<p>#列表渲染<br> v-for<br>  a.in<br>  b.of<br> key<br>  -跟踪每个节点的身份，从而重用和重新排序<br>  -理想的key值时每项都有且唯一的id<br> 数组更新检测<br>  a.使用以下方式操作数组,可以检测更新<br>  push() pop() shift() unshift() splice() sort() reverse()</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
</search>
